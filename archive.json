{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-01-19T01:17:03.631851+00:00",
  "repo": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "ietf120",
      "description": "",
      "color": "202A70"
    }
  ],
  "issues": [
    {
      "number": 13,
      "id": "I_kwDOLJmm786MJa4R",
      "title": "Terminology Workload vs Service",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/13",
      "state": "OPEN",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@frumioj has suggested to rename `service` to `workload` in https://github.com/yaronf/wimse-s2s/pull/12.\r\n\r\nThis issue is to track the conversation for the term `service` and document the decision making.",
      "createdAt": "2024-06-13T14:18:00Z",
      "updatedAt": "2024-06-13T14:18:00Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 14,
      "id": "I_kwDOLJmm786MJxcd",
      "title": "Issuer claim in Workload ID Tokens",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/14",
      "state": "OPEN",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Do Workload ID tokens require an `iss` claim or is the issuer implicit as part of the WIMSE URI in the `sub` claim?\r\nAlso, does the `iss` claim add any additional value in scope of this draft aka \"Does this draft work without `iss` claim?\"",
      "createdAt": "2024-06-13T14:56:26Z",
      "updatedAt": "2024-07-15T16:43:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "body": "@arndt-s is this addressed in section 4.1 where an iss claim is defined?",
          "createdAt": "2024-07-04T16:02:48Z",
          "updatedAt": "2024-07-04T16:02:48Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "Section 4.1 came after this issue but I believe the question is still valid.\r\n\r\nSPIFFE does not need the issuer as it uses the authority part of the SPIFFE URI as an implicit issuer. However, this makes SPIFFE JWT-SVIDs not compatible with this draft as they do not contain an \"iss\" claim according to the specification.\r\n\r\nMaybe something to check with SPIFFE community though, maybe they'll accept adding it if this would be the only delta.\r\n",
          "createdAt": "2024-07-15T13:43:51Z",
          "updatedAt": "2024-07-15T13:43:51Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@arndt-s The big change from SPIFFE is the `cnf` construct (the confirmed key), not `iss`.",
          "createdAt": "2024-07-15T16:34:00Z",
          "updatedAt": "2024-07-15T16:34:00Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "@yaronf yes and no in my opinion.\r\nOf course, `cnf` claim is new too, but I believe the complexity in adding the `iss` claim is higher. Existing deployments out there add this claim on their own with custom logic, custom values to achieve federation. Adding this claim as required and being opinionated by it will probably break a lot of them and will make migration hard.\r\n\r\n",
          "createdAt": "2024-07-15T16:43:39Z",
          "updatedAt": "2024-07-15T16:43:39Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOLJmm786MJ3dY",
      "title": "Authorization header and error responses",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/15",
      "state": "OPEN",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ietf120"
      ],
      "body": "Examples in the the Message Signatures section do not include an Authorization header. But for a 401 response (which is likely if the workload-to-workload call is disallowed by policy) the spec requires WWW-Authenticate headers to be included. How can we return a 401, or do we need a whole new HTTP status code?",
      "createdAt": "2024-06-13T15:06:05Z",
      "updatedAt": "2024-07-18T10:18:49Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 16,
      "id": "I_kwDOLJmm786MKhpF",
      "title": "\"Alg\" as a Message Signature parameter and as a JWK parameter",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/16",
      "state": "OPEN",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The `alg` Message Signature parameter is arguably a vulnerability waiting to happen, because verifiers would trust this field even though they lack context, similarly to the \"none\" issue with JWTs. IMO an algorithm should be strongly bound to a key. Can we make the `alg` field mandatory within the JWK instead?",
      "createdAt": "2024-06-13T16:27:20Z",
      "updatedAt": "2024-07-15T16:46:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "body": "+1 (Commenting as an identity enthusiast as opposed to WIMSE co-chair)",
          "createdAt": "2024-07-04T15:58:04Z",
          "updatedAt": "2024-07-04T15:59:03Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "While I think it would be great to have this, I'm not sure this is practically do-able unless we limit 'cnf' to 'jwk' only. If kid is used the actual jwk is hosted somewhere else and implementers will have a hard time making sure 'alg' attribute is always present.\r\n\r\n---\r\n\r\nI believe this issue is valid for the DPoP-ish approach too, there the alg header in the JWT could technically differ from the 'cnf' claim.",
          "createdAt": "2024-07-15T13:48:01Z",
          "updatedAt": "2024-07-15T13:50:03Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> limit 'cnf' to 'jwk' only\r\n\r\nit is currently https://www.ietf.org/archive/id/draft-sheffer-wimse-s2s-protocol-00.html#section-4.1-2.2.2.5.1 ",
          "createdAt": "2024-07-15T16:46:30Z",
          "updatedAt": "2024-07-15T16:46:30Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOLJmm786M8YDo",
      "title": "Tracking keys on Authority ",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/22",
      "state": "OPEN",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Should the Authority keep track of public keys and make sure 2 Identities don't share it?",
      "createdAt": "2024-06-20T14:44:59Z",
      "updatedAt": "2024-06-20T14:44:59Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOLJmm786NMniL",
      "title": "Content-Digest field in the Message Sig section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/23",
      "state": "OPEN",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Must be mandatory, at least for POST requests.",
      "createdAt": "2024-06-23T21:21:47Z",
      "updatedAt": "2024-06-23T21:21:47Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 24,
      "id": "I_kwDOLJmm786Nmjvo",
      "title": "might want to also include the hash of the WIT in the proof",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/24",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ietf120"
      ],
      "body": ">  You might want to also include the hash of the WIT in the proof of possession.  Perhaps just having the full name is good enough, but I think you want to account for the issuer of the WIT as well in the signature.\r\n\r\n_Originally posted by @jsalowey in https://github.com/yaronf/wimse-s2s/pull/19#discussion_r1646749641_\r\n            ",
      "createdAt": "2024-06-26T15:45:38Z",
      "updatedAt": "2024-10-15T14:40:51Z",
      "closedAt": "2024-10-15T14:40:51Z",
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "If the WIT is not included in the signature I think you can end up in a situation where the client and server have a different understanding of what was authenticated on the connection.  The workload identity is arguably the most important piece of information which is already included in the signature, but the WIT contains other information as well. For example the issuer that signed that token although this should be mapped to the workload ideneity there could be differences in some cases.  In addition if the WIT contains any other fields that contain important information then the client and server can have processed.  \r\nI'm pretty convinced that we should include the WIT in the signature.  Perhaps we can get away with it if the WIT really only contains the workload identity and not other information (no extensions) and we are confident that deployments will get the trust root configuration for token validation correct.  ",
          "createdAt": "2024-06-29T23:26:36Z",
          "updatedAt": "2024-06-29T23:26:36Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe we should clarify that a WIT must only contain identity information, and not authorization/policy. But we all know that people ignore such warnings.",
          "createdAt": "2024-06-30T08:46:56Z",
          "updatedAt": "2024-06-30T08:46:56Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "body": "@joe-venafi is there an attack you can describe that may result from not signing the WIT (even if it does not include other claims). For example, is it possible to swap out a proof from one domain to another if the issuer information is not taken into account (would require the key material to be duplicated)? If there is, we should note it in the security considerations as motivation for including the WIT hash.",
          "createdAt": "2024-07-04T15:56:46Z",
          "updatedAt": "2024-07-04T15:56:46Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "@PieterKas I can give this a try:\r\n\r\nSituation:\r\n```mermaid\r\nflowchart LR\r\nWorkloadA --> ReverseProxy --> WorkloadB\r\n```\r\n\r\n1. WorkloadA -> ReverseProxy\r\n   ```\r\n   Workload-Identity-Token: T1\r\n   Workload-Proof-Token: P1\r\n   ```\r\n\r\n2. ReverseProxy -> WorkloadB\r\nReverseProxy swaps T1 (or P1) to T2 (or P2).\r\n   ```\r\n   Workload-Identity-Token: T2\r\n   Workload-Proof-Token: P1\r\n   ```\r\n\r\nThe attack is not as simple as this, T2 claims still need to match P1, but looking at the theory:\r\n**there is no guarantee that the P1 was actually generated for T1 and not T2. As long as claims of the WIT match the proof it is accepted.**\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-07-15T13:59:16Z",
          "updatedAt": "2024-07-15T13:59:16Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @arndt-s this the mechanism, if any substantive is different between the two tokens (probably anything other than the ID and the expiration time) then the receiver will have a different world view of the state after authentication than the sender.  Even a unique identtifier such as a JTI could be problematic if the system uses it to associate the token with other data.  \r\n@PieterKas I will add some security considerations on this. ",
          "createdAt": "2024-08-25T21:59:05Z",
          "updatedAt": "2024-08-25T21:59:05Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "Added PR #57 for security considerations around binding WIT to signature. ",
          "createdAt": "2024-08-25T22:52:29Z",
          "updatedAt": "2024-08-25T22:52:29Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "We added this in https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/66. \r\n\r\nA follow up issue regarding the `iss` claim in the WPT has been created: https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/68",
          "createdAt": "2024-10-15T14:40:51Z",
          "updatedAt": "2024-10-15T14:40:51Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOLJmm786NnBO_",
      "title": "a construct that's both simple and extensible(?)",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/25",
      "state": "CLOSED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "arndt-s",
        "bc-pi"
      ],
      "labels": [],
      "body": "> Although we can definitely punt on it for now, I think we could choose a construct that's both simple and extensible.\r\n>\r\n>```json\r\n>\"signed_headers\": {\r\n>    \"txn-token\": \"txn token hash\",\r\n>    \"x-custom-context\": \"x-custom-context hash\"\r\n>}\r\n>```\r\n> Unfortunately we need the WPT to sign miscellaneous stuff, because we don't want a new WIT for every call. Having said that, as far as I can tell it does NOT need to sign the WIT itself.\r\n\r\n_Originally posted by @yaronf in https://github.com/yaronf/wimse-s2s/pull/19#discussion_r1648132681_\r\n            ",
      "createdAt": "2024-06-26T16:41:19Z",
      "updatedAt": "2024-10-15T14:52:02Z",
      "closedAt": "2024-10-15T14:52:01Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/yaronf/wimse-s2s/pull/19#discussion_r1655448211 related followup in the aforementioned comment ",
          "createdAt": "2024-06-26T20:03:45Z",
          "updatedAt": "2024-06-26T20:03:45Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Won't do, too complex.",
          "createdAt": "2024-10-15T14:52:01Z",
          "updatedAt": "2024-10-15T14:52:01Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOLJmm786NnBl5",
      "title": "Verifying the \"aud\" claim of a WPT",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/26",
      "state": "OPEN",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Current text: \"The `aud` claim of the WPT matches the target URI, or an acceptable alias or normalization thereof, of the HTTP request\".\r\n\r\n@yaronf: Man, what's a poor implementer to do with \"an acceptable alias or normalization thereof\"?\r\n\r\n@bc-pi: Whatever they need to do to get shit to work in the case there are proxies in the middle that rewrite the path or even host. I agree that the language is less than ideal but think some allowance is needed.\r\n\r\nhttps://github.com/yaronf/wimse-s2s/pull/19/files#r1648137394 for more context ",
      "createdAt": "2024-06-26T16:42:02Z",
      "updatedAt": "2024-07-15T16:21:01Z",
      "closedAt": null,
      "comments": [
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "Do we need audience if we have a good proof of possession coverage via other claims? \ud83e\udd14",
          "createdAt": "2024-07-15T14:02:49Z",
          "updatedAt": "2024-07-15T14:02:49Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we need audience if we have a good proof of possession coverage via other claims? \ud83e\udd14\r\n\r\nAudience is, to the best of my always limited understanding, an integral part of that proof of possession coverage. No?",
          "createdAt": "2024-07-15T16:20:52Z",
          "updatedAt": "2024-07-15T16:21:01Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "I_kwDOLJmm786N-o8k",
      "title": "Workload identity URI in other fields",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/28",
      "state": "OPEN",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The WIT URI appears in the subject of a cert and token, but shouild it also be used for the issuer of the token and the CA subject name of a certificate.   ",
      "createdAt": "2024-06-29T23:30:57Z",
      "updatedAt": "2024-07-04T15:49:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Also potentially `aud`.",
          "createdAt": "2024-06-30T08:39:29Z",
          "updatedAt": "2024-06-30T08:39:29Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> The WIT URI appears in the [...]\r\n\r\nI am admittedly confused by what a \"WIT URI\" might be.  \r\n\r\n",
          "createdAt": "2024-06-30T12:31:02Z",
          "updatedAt": "2024-06-30T12:31:02Z"
        },
        {
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "body": "Commenting as an identity enthusiast as opposed to chair:\r\n\r\nI like the idea of using the same identifier format for all entities, but I do wonder if that is necessary. For a Bring Your own PKI scenario it may not be possible to change the issuer identifier for the CA, and the aud laim may correspond to the aud claim in the access token instead of some other workload identity (not sure those are constrained to aud).",
          "createdAt": "2024-07-04T15:49:45Z",
          "updatedAt": "2024-07-04T15:49:45Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOLJmm786OElKQ",
      "title": "Replay protection",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/29",
      "state": "OPEN",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Ensure that the replay protection for the DPoP solution (using the `jti` claim of the WPT) is equivalent to the replay protection for Message Signatures (using the nonce).",
      "createdAt": "2024-07-01T11:17:54Z",
      "updatedAt": "2024-07-01T11:17:54Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 31,
      "id": "I_kwDOLJmm786OZayF",
      "title": "Workload Identity -> Identifier",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/31",
      "state": "OPEN",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "And in general consolidate the Workload Identity section with the architecture I-D, or possibly remove the section altogether.",
      "createdAt": "2024-07-03T16:26:58Z",
      "updatedAt": "2024-07-04T15:45:54Z",
      "closedAt": null,
      "comments": [
        {
          "author": "PieterKas",
          "authorAssociation": "NONE",
          "body": "Commenting as an identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nSection 3 should be renamed as Workload Identifier since the section is all about defining the workload identifier format. I found it useful to have the definition of the identifier format here, but agree that it should not be at odds with the architecture documents definition. @joe-venafi it may make sense to have only one definition - if it is in the architecture document, it would be sifficinet to reduce this section to simply reference the definition of a workload identifier in the architecture doc.",
          "createdAt": "2024-07-04T15:45:53Z",
          "updatedAt": "2024-07-04T15:45:53Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOLJmm786OZdYy",
      "title": "Why ABNF for WIT?",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/32",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yaronf"
      ],
      "labels": [],
      "body": "In Sec. [The WIT HTTP Header](https://www.sheffer.org/wimse-s2s/draft-sheffer-wimse-s2s-protocol.html#name-the-wit-http-header), we define the ABNF even though we say the WIT is a JWT and this completely defines the syntax. IMO the ABNF could actually confuse implementers.",
      "createdAt": "2024-07-03T16:33:37Z",
      "updatedAt": "2024-12-24T15:22:24Z",
      "closedAt": "2024-12-24T15:22:24Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The last time I went through the process of requesting registration of an HTTP Field Name to carry a JWT, there was some grumbling from one of the designated experts about it not being defined as an RFC 8941 Structured Field Value. When it was explained that there wasn't really an appropriate SF type to carry a JWT (and especially that sf-binary didn't fit at all) the grumbling shifted to general complaints that the syntax wasn't well defined (despite, as you point out, the syntax of a JWT being completely defined by JWT). The grumbling was partially mollified by the addition of some less than useful ABNF (found [here](https://www.rfc-editor.org/rfc/rfc9449.html#section-4.1-6)). It was more involved than that, of course, but that's the basic story line. So I thought I'd try and get ahead of that kind of DE push-back a bit while adding some ABNF that's a little more descriptive/useful. Which is what is [here](https://www.ietf.org/archive/id/draft-sheffer-wimse-s2s-protocol-00.html#name-workload-identity-token-hea). I think the WPT header field should also get some ABNF but I couldn't fit it in as well and ran out of time for the pre -00 PR deadline. ",
          "createdAt": "2024-07-12T02:03:58Z",
          "updatedAt": "2024-07-12T02:03:58Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi: we should have a similar (same?) ABNF for the WPT.",
          "createdAt": "2024-12-05T16:00:38Z",
          "updatedAt": "2024-12-05T16:00:38Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOLJmm786OZoCf",
      "title": "Long lines - automation",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/34",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Instead of manually breaking lines, it's best to use [rfcfold](https://github.com/ietf-tools/rfcfold/blob/master/rfcfold). And then ideally we'd automate generation of the sample code.",
      "createdAt": "2024-07-03T17:02:38Z",
      "updatedAt": "2024-12-05T15:50:22Z",
      "closedAt": "2024-12-05T15:50:22Z",
      "comments": []
    },
    {
      "number": 36,
      "id": "I_kwDOLJmm786Ohja3",
      "title": "Add numbering to Figure in Section 1.1",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/36",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "yaronf"
      ],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nIt will be helpful to add numbering to the Figure in section 1.1 and have that correspond to the message flow description (currently a series of bullet points). ",
      "createdAt": "2024-07-04T16:08:18Z",
      "updatedAt": "2024-12-24T15:23:34Z",
      "closedAt": "2024-12-24T15:23:34Z",
      "comments": []
    },
    {
      "number": 37,
      "id": "I_kwDOLJmm786OhmDi",
      "title": "Clarification of \"For those who celebrate\" phrase",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/37",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nSection 4.1.1, paragraph 2 starts with \"For those who celebrate...\" Is this an auto-correct error, or does it have some specific meaning in the context of ABNF notation?",
      "createdAt": "2024-07-04T16:17:12Z",
      "updatedAt": "2024-10-15T14:53:45Z",
      "closedAt": "2024-10-15T14:53:45Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It's a subtle attempt at a little bit of humor. ChatGPT explains the general phrase thusly: \r\n\r\n> The phrase \"for those who celebrate\" is often used to acknowledge that not everyone may participate in a particular holiday, event, or tradition. It's a way of being inclusive and respectful of diverse beliefs, practices, and customs. For example, saying \"Happy Holidays to those who celebrate\" recognizes that while some people may be celebrating a specific holiday, others may not observe it or may celebrate different holidays.\r\n\r\nThe meaning in the context of this document is to playfully acknowledge that some people really like ABNF while others aren't readily familiar with it and don't find it particularly useful. \r\n\r\nOf course, if the joke has to be explained...",
          "createdAt": "2024-07-11T22:21:12Z",
          "updatedAt": "2024-07-11T22:21:12Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "See also #32.",
          "createdAt": "2024-07-12T12:20:02Z",
          "updatedAt": "2024-07-12T12:20:02Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "I_kwDOLJmm786OhmUa",
      "title": "Extensibility of the Workload Proof Token",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/38",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nIt may be helpful to make the proof mechanism extensible and allow for the inclusion of additional elements that may be included in the proof (similar to DPoP).",
      "createdAt": "2024-07-04T16:18:03Z",
      "updatedAt": "2024-12-05T15:48:07Z",
      "closedAt": "2024-12-05T15:48:07Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "There is nothing currently precluding additional stuff in the proof. I know DPoP says something about it being okay for the proof to contain other information (end of this paragraph https://www.rfc-editor.org/rfc/rfc9449.html#section-4.2-12) but it's not necessary to allow it. ",
          "createdAt": "2024-07-11T21:44:31Z",
          "updatedAt": "2024-07-11T21:44:31Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe there's a broader discussion on \"What proof of possession attributes do we want\" if we go down the DPoP-ish route. HTTP message signatures come with the capability to let the implementer choose what property the signature covers. (whether this is good or not).\r\n\r\nI personally don't know yet and I'm hoping IETF120 will give new perspectives.",
          "createdAt": "2024-07-15T14:12:46Z",
          "updatedAt": "2024-07-15T14:12:46Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "After considering the differences between HTTP Message Sigs and the DPoP mechanisms we decided to limit extensibility of this one. ",
          "createdAt": "2024-12-05T15:48:07Z",
          "updatedAt": "2024-12-05T15:48:07Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "I_kwDOLJmm786Ohou9",
      "title": "Array of additional tokens",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/39",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "arndt-s",
        "bc-pi"
      ],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair.\r\n\r\nThe oth claim allows for a certain degree of extensibility, but raises a question about what to do if there is more  than one additional token for which a hash should be included. should this be an array of hashes? How would an implementor know which of the tokens is corresponding to which of the hashes?",
      "createdAt": "2024-07-04T16:25:06Z",
      "updatedAt": "2024-10-15T14:51:35Z",
      "closedAt": "2024-10-15T14:51:34Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The `oth` claim as it's defined in -00 is kinda garbage, if we're being honest. \r\n\r\nSomething more along the lines of what @yaronf suggested in https://github.com/yaronf/wimse-s2s/pull/19#discussion_r1648132681 that resulted in https://github.com/yaronf/wimse-s2s/issues/25 would probably be a better approach (to the extent we need this kind of extensibility anyway). While still aiming to avoid reinventing HTTP signatures...  ",
          "createdAt": "2024-07-11T20:07:59Z",
          "updatedAt": "2024-07-11T20:07:59Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Decided to avoid, mainly due to complexity. See also #25.",
          "createdAt": "2024-10-15T14:51:34Z",
          "updatedAt": "2024-10-15T14:51:34Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOLJmm786Ohp-q",
      "title": "Workload Proof Token Binding to transport",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/40",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair\r\n\r\nDPoP allows for inclusion of claims about the HTTP Method and URI of the recipient to avoid spurious re-use or re-purposing of the proof. Is this achieved through the aud claim, or do we need additional provisions/extensions for this in the Workload Proof Token. ",
      "createdAt": "2024-07-04T16:29:40Z",
      "updatedAt": "2024-09-25T19:57:55Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It is currently (in -00) achieved partially though the `aud` claim, which is basically equivalent to DPoP's `htu` claim. In the first draft of this one, I opted for simplicity, minimalism, and the use of existing original RFC7519 defined claims where it was possible and seemed to make sense. ",
          "createdAt": "2024-07-11T20:16:40Z",
          "updatedAt": "2024-07-11T20:16:40Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi So why not add the `htm` (HTTP method) claim with the same syntax as in RFC 9449?",
          "createdAt": "2024-09-20T11:19:14Z",
          "updatedAt": "2024-09-20T11:19:14Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> I opted for simplicity, minimalism, and the use of existing original RFC7519 defined claims where it was possible and seemed to make sense",
          "createdAt": "2024-09-25T16:30:24Z",
          "updatedAt": "2024-09-25T16:30:24Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "I imagine the same lofty goals applied to the original DPoP, and yet `htm` found its way in - because it's so critical to the semantics of the message.",
          "createdAt": "2024-09-25T18:22:54Z",
          "updatedAt": "2024-09-25T18:22:54Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "It was much more haphazard, if I recall correctly. ",
          "createdAt": "2024-09-25T19:57:54Z",
          "updatedAt": "2024-09-25T19:57:54Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOLJmm786Ohr9n",
      "title": "Inconsistency between DPoP and HTTP Signature",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/41",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nThe HTTP Signature proposal requires the Workload Identity Token to be signed, but the Workload Proof Token does not include a mechanism for signing the Workload Identity Token. Proposal is to include signing of the Workload Identity Token in both to avoid asymmetric security values.",
      "createdAt": "2024-07-04T16:36:18Z",
      "updatedAt": "2024-10-15T14:49:52Z",
      "closedAt": "2024-10-15T14:49:37Z",
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I dare say the document authors do not (at this point anyway) agree on the need for the WIT to be covered by the proof signature https://github.com/yaronf/wimse-s2s/issues/24 \r\n\r\nMeanwhile the eventual goal is to choose just one of the DPoP-inspired and HTTP Signature based approaches. So I don't know that there's much value in trying to make them the same for the sake of avoiding asymmetric security values. ",
          "createdAt": "2024-07-11T22:35:48Z",
          "updatedAt": "2024-07-11T22:35:48Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed:\r\n- Signing the WIT in WPT\r\n- Consistency between Message Sig and PoP is no longer a goal.",
          "createdAt": "2024-10-15T14:49:37Z",
          "updatedAt": "2024-10-15T14:49:37Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "for reference, added in https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/66",
          "createdAt": "2024-10-15T14:49:50Z",
          "updatedAt": "2024-10-15T14:49:50Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOLJmm786Ohs7V",
      "title": "Define Security Goals",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/42",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair.\r\n\r\nIt would be beneficial for readers, as well as future attempts at formal analysis, to have a section that explicitly defines the security goals for this draft. ",
      "createdAt": "2024-07-04T16:39:51Z",
      "updatedAt": "2024-07-11T21:55:41Z",
      "closedAt": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Hard to disagree with this. But also hard to actually do it (speaking for myself anyway). Do you have any pointers to places elsewhere where this has been done well? ",
          "createdAt": "2024-07-11T21:55:40Z",
          "updatedAt": "2024-07-11T21:55:40Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOLJmm786OhuZS",
      "title": "Freshness of Workload Proof Tokens ",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/43",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "ietf120"
      ],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair\r\n\r\nDPoP includes a mechanism that allows verifiers to specify a nonce that should be used in the next proof. It achieves this by returning a nonce as part of the response to a request (either as an error or as part of the HTPP 200 response). It adds an extra call, but is efficient after that with a fresh nonce provided in each response. Although including these nonces may preclude pre-computation and re-use of proofs, it may be required for high assurance applications and may be made optional, similar to how this mechanism was made options for DPoP.",
      "createdAt": "2024-07-04T16:45:25Z",
      "updatedAt": "2024-07-11T17:11:27Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Interesting, but if we accept an extra round we can do much more than provide a nonce. We can replace the asymmetric digital signature by an initial handshake to establish a shared secret, followed by symmetric MAC for all other HTTP exchanges. The \"hidden\" cost is quite a bit of complexity.",
          "createdAt": "2024-07-04T20:51:10Z",
          "updatedAt": "2024-07-04T20:51:10Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "Challenge response would limit the use cases to synchronous calls. Asynchronous deployments such as message brokers would not be able to implement this.",
          "createdAt": "2024-07-11T14:57:53Z",
          "updatedAt": "2024-07-11T17:11:27Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "I_kwDOLJmm786Ohvag",
      "title": "PKIX Path Validation",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/44",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "jsalowey"
      ],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair\r\n\r\nIn section 5, which PKIX path validation rules apply (all of them?).",
      "createdAt": "2024-07-04T16:49:06Z",
      "updatedAt": "2024-10-15T14:48:07Z",
      "closedAt": "2024-10-15T14:48:06Z",
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Probably all, RFC 5280.",
          "createdAt": "2024-07-11T14:52:25Z",
          "updatedAt": "2024-07-11T14:52:25Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "+1",
          "createdAt": "2024-10-09T04:13:39Z",
          "updatedAt": "2024-10-09T04:13:39Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Is this resolved by #63 ?",
          "createdAt": "2024-10-09T17:41:52Z",
          "updatedAt": "2024-10-09T17:41:52Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes I think so/ ",
          "createdAt": "2024-10-09T20:44:25Z",
          "updatedAt": "2024-10-09T20:44:25Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed",
          "createdAt": "2024-10-15T14:48:07Z",
          "updatedAt": "2024-10-15T14:48:07Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOLJmm786Ohw1_",
      "title": "Section 5: WIMSE workload identity -> WIMSE workload identifier",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/45",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nPropose to change the opening sentence from \"The WIMSE workload identity...\" to \"The WIMSE workload identifier...\"",
      "createdAt": "2024-07-04T16:54:18Z",
      "updatedAt": "2024-09-20T11:21:00Z",
      "closedAt": "2024-09-20T11:21:00Z",
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as dup of #31 .",
          "createdAt": "2024-09-20T11:21:00Z",
          "updatedAt": "2024-09-20T11:21:00Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOLJmm786OhyLW",
      "title": "X.509 fields",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/46",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "jsalowey"
      ],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair\r\n\r\nSection 5 states that the identifier may be used in an X.509 certificate. From reading the draft, this may be a client or a server certificate. Should we included additional details about the certificates themeselves? Should a workload be able to use the same certificate for client authentication and as a server? What are the extended key usage parameters that should be supported (can a cert have both)?",
      "createdAt": "2024-07-04T16:59:25Z",
      "updatedAt": "2024-12-16T02:03:05Z",
      "closedAt": "2024-12-16T02:03:04Z",
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "PR#63 adds some of this.  We may want to make more specification around what can be in the URI (no port, username; trust domain lowercase)",
          "createdAt": "2024-10-09T04:12:46Z",
          "updatedAt": "2024-10-09T04:12:46Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue is addressed by text in section 5 an section 3. ",
          "createdAt": "2024-12-16T02:03:04Z",
          "updatedAt": "2024-12-16T02:03:04Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOLJmm786Ohy3U",
      "title": "How to validate if a CA is authorized to issue WIMSE credentials",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/47",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "jsalowey"
      ],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nIs there an existing mechanism that a verifier can use to determine that the CA is authorized to issue WIMSE credentials (certificates)?",
      "createdAt": "2024-07-04T17:01:47Z",
      "updatedAt": "2024-10-15T14:44:46Z",
      "closedAt": "2024-10-15T14:44:46Z",
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Talk about a trust store? Mapping of trust domains to CAs? Discovery mechanism for that?\r\n\r\nOr keep it out of scope.",
          "createdAt": "2024-07-11T14:40:26Z",
          "updatedAt": "2024-07-11T14:41:58Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Need to clarify: a specific trust store. No \"key usage\".",
          "createdAt": "2024-08-29T14:57:13Z",
          "updatedAt": "2024-08-29T14:57:13Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "The existing mechanisms for certificate path validation validate that the certificate is signed by certificate that chains up to a trusted root.  Validating that this issuer is authorized to issue Wimse credentials would require additional steps.  \r\n\r\nOne possible additional step is to maintain a configuration that maps a trust domain present in a WIMSE identifier to a particular trust root.  This could be done by either using the trust domain portion of the WIMSE identifier to select the CA trust root that is used for path validation or to go through path validation with an existing trust to and verify the trust domain maps to the root certificate used to validate the credential after the fact.   We could also define a discovery mechanism to discover this configuration, perhaps through a well know URI path or through DNS (both would have some difficult security considerations.  \r\n\r\nIf you already have trust established with a particular trust anchor for authorizing WIMSE then you could possibly use certificate fields to authorize the issuer.  Theoretically, naming constraints to could used to constrain a particular sub-CA to only issue credentials for a particular trust domain.  One could also define other extensions or extended key usages that could relate to WIMSE, but that would need to be defined.  \r\n\r\nI think it would be best to start with a requirement for a configuration of trust domain to a CA.  \r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-09-09T04:06:14Z",
          "updatedAt": "2024-09-09T04:06:14Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@jsalowey Can you open a PR for this? Personally I would go for the simplest configuration, where provisioning of this configuration is out of scope.",
          "createdAt": "2024-09-14T20:44:57Z",
          "updatedAt": "2024-09-14T20:44:57Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "#62 ",
          "createdAt": "2024-09-20T00:54:11Z",
          "updatedAt": "2024-09-20T00:54:11Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed.",
          "createdAt": "2024-10-15T14:44:46Z",
          "updatedAt": "2024-10-15T14:44:46Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOLJmm786Ohzjt",
      "title": "Section 5: WIMSE Identities -> WIMSE Credentials",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/48",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "yaronf"
      ],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair.\r\n\r\nConsider replacing WIMSE Identities with WIMSE Credentials since it is the credential that is being verified, which may include a Workload identifier and possibly other claims.",
      "createdAt": "2024-07-04T17:04:08Z",
      "updatedAt": "2024-09-04T17:43:52Z",
      "closedAt": "2024-09-04T17:43:52Z",
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "WIT stays though.",
          "createdAt": "2024-08-29T14:53:47Z",
          "updatedAt": "2024-08-29T14:53:47Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "I_kwDOLJmm786Oh08f",
      "title": "Define WIMSE URI",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/49",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "jsalowey"
      ],
      "labels": [],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nSection 5 introduces the term \"WIMSE URI\" - if this is defined in the architecture document, it should be referenced. If this is defined in Section 3, perhaps rename as workload identitifier.",
      "createdAt": "2024-07-04T17:09:11Z",
      "updatedAt": "2024-12-23T03:11:43Z",
      "closedAt": "2024-12-23T03:11:43Z",
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Workload Identifier IMHO, and see #31.",
          "createdAt": "2024-07-04T20:42:02Z",
          "updatedAt": "2024-07-04T20:42:02Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "I prefer the URI to be defined once, in the arch doc.\r\n\r\nBrian: define it here.\r\n\r\nArndt: should coexist nicely with K8s. Joe: but do they have the notion of a trust domain.",
          "createdAt": "2024-08-29T14:48:13Z",
          "updatedAt": "2024-08-29T14:51:50Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "RFC5280 defines a URI SAN for certificates.  These URIs must conform to RFC 3986.  This includes both the URL and URN schemes.   The main restriction is that 5280 does not allow relative URIs and a scheme must be included, the authority component is optional. This gives some flexibility and it might even be possible to represent a k8s URN in this filed under the urn scheme, but I'm not sure it would be a good idea.  \r\nI think we should specify that a URI MUST meet the criterial of 5280 and that any scheme that is used SHOULD specify an authority component that is a domain name.  If present, he authority portion MUST be used to map the name to the trust domain parameters used to validate a WIT or certificate containing the name.  If the authority field is not present then the mapping of the identity to trust domain parameters MUST be done through a locally specified mechanism that is beyond the scope of this specification. ",
          "createdAt": "2024-09-09T03:49:17Z",
          "updatedAt": "2024-09-09T03:49:17Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@jsalowey Why should we even worry about relative URIs? It seems weird for a certificate IMHO. We could simplify the whole thing by saying MUST meet the criteria of 5280 and MUST have an authority component. Have you seen relative URIs \"in the wild\" in similar situations?",
          "createdAt": "2024-09-14T20:40:42Z",
          "updatedAt": "2024-09-14T20:40:42Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "K8s appears to use some form of URNs that do not have an authority component. They are just a colon separated series of names. But I am happy to say the URI must meet the criteria of 5280 and MUST have an authority component that identifies a trust domain.  ",
          "createdAt": "2024-09-19T23:30:12Z",
          "updatedAt": "2024-09-19T23:30:12Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "See PR #61  and #62 ",
          "createdAt": "2024-09-20T00:53:43Z",
          "updatedAt": "2024-09-20T00:53:43Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "resolved by PR #82  by removing references WIMSE URI and using WIMSE Identity instead ",
          "createdAt": "2024-12-16T01:59:02Z",
          "updatedAt": "2024-12-16T01:59:02Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOLJmm786Oh2HU",
      "title": "Limiting Proof of Possession Scope",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/50",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "arndt-s"
      ],
      "labels": [
        "ietf120"
      ],
      "body": "Commenting as identity enthusiast as opposed to WIMSE co-chair:\r\n\r\nDo we need additional mechanism defined in the Workload Proof Token for additional scoping (e.g. specific API on a target workload)?",
      "createdAt": "2024-07-04T17:13:00Z",
      "updatedAt": "2024-09-12T14:53:22Z",
      "closedAt": "2024-09-12T14:53:21Z",
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "This is related to the bigger question of whether the token is reusable or associated with a single HTTP request.",
          "createdAt": "2024-07-11T14:31:13Z",
          "updatedAt": "2024-07-11T14:31:13Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "The `aud` is basically meant to do that https://www.ietf.org/archive/id/draft-sheffer-wimse-s2s-protocol-00.html#section-4.2-2.2.2.2.1 \r\n\r\nBut also what @yaronf said ",
          "createdAt": "2024-07-11T22:30:05Z",
          "updatedAt": "2024-07-11T22:30:05Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "and the `@method` and `@request-target` and `Content-Type` and `Content-Digest` in the https://www.ietf.org/archive/id/draft-sheffer-wimse-s2s-protocol-00.html#name-option-2-authentication-bas approach ",
          "createdAt": "2024-07-18T13:39:48Z",
          "updatedAt": "2024-07-18T13:39:48Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "From what I can see we have the following options for the Workload Proof Token (DPoP approach). The order is random and the options are not pre-filtered.\r\n\r\n- Option A: Specify some selected claims for various request attributes. This could be an Access Token and/or Transaction token hash, the audience to specify endpoint and potentially method, maybe body hash, etc.\r\n\r\n- Option B: Don't specify anything and only limit it by the audience. If customers need specific attributes bound they can include it into the audience\r\n\r\n- Option C: Build something more flexible that allows to specify similar to HTTP Message Signatures what is bound. This would require the draft to include rules on how the digest is calculated.\r\n\r\n- Option D: Allow customers to specify their own claims and rules (in addition to audience). We could only specify the claim for the digest. While this allows the most flexibility the interoperability would be a challenge.\r\n\r\n- Option E: Use RFC9449 claims (htm & htu) to start with and profile more if necessity arises. OAuth could profit from this too then which could boost adoption.\r\n\r\n\r\nI'm sure there's more options that don't come into my mind at the moment.",
          "createdAt": "2024-08-29T15:27:47Z",
          "updatedAt": "2024-08-29T15:27:47Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "B and D are clearly a no go because they leave to much to the user and/or do not promote interoperability.\r\n\r\nPersonally I think we'll be forced into C, I think the complexity is justified and people will be writing new code for WIMSE anyway.\r\n\r\nI don't understand the comment about OAuth in option E. To me this is not OAuth DPoP, this is an entirely new think inspired by that DPoP. And yes, features we add here may be \"back ported\" into OAuth DPoP.",
          "createdAt": "2024-08-30T00:15:51Z",
          "updatedAt": "2024-08-30T00:15:51Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "@yaronf yes, this is what I was trying to say, if WIMSE would define claims for messaging queue possession, OAuth could profit from that too.\r\n\r\nAnyway, nothing we should put a lot of weight on IMO.",
          "createdAt": "2024-09-03T14:49:12Z",
          "updatedAt": "2024-09-03T14:49:12Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this in favour of #39.\r\n\r\nOverall, the authors believe that including the user context to the WPT scope makes sense. The current draft includes audience, ath, tth in the DPoP approach and allows signature over url, header & body in the Http Message Signature approach.\r\n\r\n#39 is focusing on accustom deployments that may use over approaches with the WPT token.",
          "createdAt": "2024-09-12T14:53:21Z",
          "updatedAt": "2024-09-12T14:53:21Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "I_kwDOLJmm786OmPjU",
      "title": "Add \"document history\" section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/51",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-05T11:08:41Z",
      "updatedAt": "2024-08-14T22:17:18Z",
      "closedAt": "2024-08-14T22:17:18Z",
      "comments": []
    },
    {
      "number": 52,
      "id": "I_kwDOLJmm786PlL3g",
      "title": "DPoP-inspired vs Message Signatures",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/52",
      "state": "OPEN",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "ietf120"
      ],
      "body": "Creating a reference-able & umbrella issue for the choice between the DPoP-inspired and the HTTP Message Signatures approach.\r\n\r\nSection 1:\r\n> For application-level protection we currently propose two alternative solutions, one inspired by DPoP [[RFC9449](https://www.sheffer.org/wimse-s2s/draft-sheffer-wimse-s2s-protocol.html#RFC9449)] in [Section 4.2](https://www.sheffer.org/wimse-s2s/draft-sheffer-wimse-s2s-protocol.html#dpop-esque-auth) and one which is a profile of HTTP Message Signatures [[RFC9421](https://www.sheffer.org/wimse-s2s/draft-sheffer-wimse-s2s-protocol.html#RFC9421)] in [Section 4.3](https://www.sheffer.org/wimse-s2s/draft-sheffer-wimse-s2s-protocol.html#http-sig-auth). The design team believes that we need to pick one of these two alternatives for standardization, once we have understood their pros and cons.",
      "createdAt": "2024-07-15T14:29:19Z",
      "updatedAt": "2025-01-17T20:51:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Keeping this issue open. The design team still believes that one option is better than two, but the WG decided otherwise. Hoping to revisit this decision later on.",
          "createdAt": "2025-01-17T20:51:10Z",
          "updatedAt": "2025-01-17T20:51:10Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "I_kwDOLJmm786P5RPZ",
      "title": "Use of WIT without proof of possession and interop with legacy systems",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/53",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "jsalowey"
      ],
      "labels": [],
      "body": "The current draft says that the WIT must not be accepted without proof of possession of the corresponding private key.  This is for security reasons because if you are willing to accept the WIT without proof of possession then the security benefit of the WIT is greatly diminished.  \r\n\r\nThis restriction makes it difficult to integrate a WIT seamlessly into existing applications.  I question whether this could be done securely, but I think we should have the discussion:\r\n1. Is there a sensible policy that would make this OK?  It seems that legacy application would be none the worse off, but application that could handle the WIT would still benefit.  I think there is a difficulty here in that you have client an services sides that might be updated a different times making it more complex.\r\n2. Perhaps there is an alternate form of POP that would be easier.  For example binding to a TLS key or identity.  While this seems attractive, one of the reasons for the WIT is to suport cases where MTLS isn't realistic. \r\n\r\n",
      "createdAt": "2024-07-17T17:27:44Z",
      "updatedAt": "2025-01-17T13:18:54Z",
      "closedAt": "2025-01-17T13:18:54Z",
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "And then the do-nothing alternative:\r\n\r\n3. Don't allow using WIT without PoP (granted there's no way to enforce this restriction in the real world), and rely on token exchange to translate between legacy bearer tokens and WITs.",
          "createdAt": "2024-07-17T17:41:36Z",
          "updatedAt": "2024-07-17T17:41:36Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with both points (1.) and (2.).  \r\n1.  is needed for backward-compatibility with existing \"legacy\" systems.  \r\n2. allows WITs to be built on top of existing X.509-credentials, which should be part of the recommended mTLS solution.  \r\n\r\nFor both of these cases, claims within the WIT can further constrain access using \"aud\"/\"scp\" to express least-privileges access on top of an identity's (possibly-broad) access privileges imparted by Workload identity alone.  The \"aud\"/\"scp\" constraints can also be preserved during federation with OIDC-like IdPs.\r\n\r\nIMO, the WIMSE s2s protocol should provide the option 2 for PoP, where the protocol can accept WITs layered on top of existing X.509-credentials for situations where mTLS *is* realistic.   In these cases, reducing the number of tokens required can reduce developer integration bugs and misconfigurations, when compared to the multi-token-requirements of Section 4.  X.509 Certificate hash binding or SAN identity binding should be considered, as an adaptation of https://www.ietf.org/archive/id/draft-ietf-wimse-arch-01.html#name-identity-credentials \"Alternatively, sender constrained tokens can be used such as TLS session binding.\"  ",
          "createdAt": "2024-08-19T14:21:09Z",
          "updatedAt": "2024-08-19T14:21:09Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "* For legacy systems, the bearer token's format is unspecified, so the WIMSE token cannot be coerced to have it.\r\n* Also the type field would mismatch, and aud would be missing.\r\n\r\nWe don't see a way to use WITs with legacy systems.\r\n\r\nA WIT would be ignored by a legacy system, but the non-legacy system would still need to include a legacy token as well.",
          "createdAt": "2024-08-29T14:34:57Z",
          "updatedAt": "2024-08-29T14:34:57Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "A WIT is transported in its own header so it can co-exist with a legacy bearer token attribute.  \r\n- A legacy receiver will ignore the WIT and only use the bearer token\r\n- A legacy sender will send both the WIT and the bearer token if it knows it needs to send the bearer token. \r\n\r\nThe systems that rely upon the WIT will be secure because it will not be used as a bearer token.  The bearer token approach would still have all the problems of a bearer token.  In this approach the WIT should convey the information from the bearer token that is necessary for it to be usable by the system.  \r\n\r\nThere could be an alternate approach where the bearer token could have a superset of what is in the WIT if it also includes the identity in the WIT in a standard field.  That way a system that understands how to use the WIT could also validate that the bear token is bound to the WIT (and not really a bearer token when used by a system that understands the WIT).  \r\n\r\nI'm not sure which approach is better right now, but the more information you include in the WIT the more chance it needs to be updated or revoked, so it might be worth defining what the legacy binding attribute to bind an existing token format to the WIT.  ",
          "createdAt": "2024-09-09T02:48:31Z",
          "updatedAt": "2024-09-09T02:48:31Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "> A legacy sender will send both the WIT and the bearer token if it knows it needs to send the bearer token.\r\n\r\n@jsalowey I think you meant to say, A non-legacy sender communicating with a legacy receiver will send...\r\n\r\nBut I think the point of the issue is that a non-legacy sender can send the WIT itself as the bearer token. I can see systems where this would work, if the bearer token is opaque to the receiver and is only validated by another service (e.g. an API Gateway), and where we're willing to modify that service to detect and validate WITs. That *could* be a reasonable migration strategy I believe.",
          "createdAt": "2024-09-14T20:32:43Z",
          "updatedAt": "2024-09-14T20:32:43Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it would be better to not allow using the WIT as a bearer token.  It will cause problems because entities that use the WIT with POP do not have to be as concerned with what to do if a WIT is disclosed.  If you start using it as a bearer token then that you reintroduce these concerns.  If you're going to modify a system to use a WIT it needs to use the POP.  If not just keep using the legacy Token. ",
          "createdAt": "2024-09-19T23:27:01Z",
          "updatedAt": "2024-09-19T23:27:01Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "I can think of ways to deal with it. But all in all, I agree that it's simpler (for implementations) and more secure to keep the current wording that requires PoP for any use of the WIT.",
          "createdAt": "2024-09-20T10:49:07Z",
          "updatedAt": "2024-09-20T10:49:07Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "The draft already states that the WIT MUST NOT be used as a bearer token and it defines new headers for the WIT and WPT so there is no conflict with existing tokens so they could be presented at the same time.  I think this issue could be closed, but we could also add text to the document describing that bearer tokens in existing headers can be presented in the same message as WPT and WIT tokens for compatibility during transitions but applications should implement policy controls to reject the use of identity bearer tokens once the WIT is in use.  ",
          "createdAt": "2024-12-16T01:38:54Z",
          "updatedAt": "2024-12-16T01:38:54Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "On call decided to add section on co-existance with bearer token JWT",
          "createdAt": "2024-12-19T15:18:18Z",
          "updatedAt": "2024-12-19T15:18:18Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "I_kwDOLJmm786QveZD",
      "title": "Self-signed WITs",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/54",
      "state": "OPEN",
      "author": "kenmccracken-google",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In \"Section 4.1.  The Workload Identity Token\", the spec states: \r\n\r\n`It is issued by the Identity Server and binds a public key to the workload identity.`\r\n\r\nCould we relax this to allow for self-signed WITs as well?\r\n\r\nSelf-signed WITs could reduce potential load on the Identity Server, and mitigate availability concerns on this centralized issuer.   These WITs would be signed by the Workload's Private Key.  To validate the WIT signature, we could build on the X.509 certificate credentials that have already been distributed to Workloads.  All we would need is to convey the chain to a Trust Anchor via the [x5c](https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.6) claim.\r\n\r\nIn Section 6.1 WIMSE Identity, the spec states:\r\n\r\n`The association\r\n   of an issuer, trust domain and a cryptographic trust root MUST be\r\n   communicated securely out of band.`\r\n\r\nIf we already have machinery to distribute Trust Anchors for a Trust Domain out of band, the certificate chain can be validated against an appropriate Trust Anchor. ",
      "createdAt": "2024-07-24T19:55:59Z",
      "updatedAt": "2024-10-29T20:17:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@kenmccracken-google I'm a bit confused by your assumptions here. According to the current draft (and we may have not been clear on that) the workload only needs a certificate if it is going to use Mutual TLS. If it's using any of the app-level options (Sec. 4.2 or 4.3), it would only request a WIT from the Identity Server. I expect there will be *some* workloads that are provisioned with both a cert and a WIT, but that wouldn't be common.",
          "createdAt": "2024-07-26T20:57:31Z",
          "updatedAt": "2024-07-26T20:57:31Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Yaron, thanks for your response and apologies for not being clear on my assumptions.\r\n\r\nI think we should consider as a base case mTLS authentication between Workloads.  To support this base case, Workload agents generate private key/public key pairs, construct CSRs, and request and receive X.509 Certificates, after passing through the Attestation steps described in the draft [WIMSE Architecture](https://datatracker.ietf.org/doc/draft-ietf-wimse-arch/) document.  Workload agents also bootstrap and periodically update Trust Domains and their corresponding Trust Bundles.  \r\n\r\nOne option is to contact a central IdP for a centrally-signed WIT, with the proof-of-possession coming in the form of one of (Sec. 4.2 or 4.3); as is currently in the draft.  I filed this issue to consider supporting an additional use case: a self-signed WIT option.   \r\n\r\nFor the self-signed WIT option, the Workload agent can use the workload's private key and X.509 Certificate chain to construct a self-signed WIT.  The X.509 Certificate chain can be conveyed in the [x5c](https://www.rfc-editor.org/rfc/rfc7515.html#section-4.1.6) token header of the WIT.  The Workload can establish mTLS communication with compatible destination Workloads, together with a self-signed WIT.  \r\n\r\nHere's a more detailed diagram:\r\n\r\n```mermaid\r\ngraph LR\r\nA(Identity Server)\r\nB(Workload Agent) -->|Workload API| A(Identity Server)\r\nA -->|x509 cred| B\r\nB -->|X509 cred| C(Source Workload)\r\nC(Source Workload) -->|mTLS & WIT| D(Proxy)\r\n    B -->|Generate WIT| B\r\n    B -->|WIT cred| C\r\n    D -->|Add x5t header| D\r\n    D -->|WIT & x5t| E(Destination Workload)\r\n    E -->|validate WIT & x5t| E\r\n```\r\n\r\nWhen a Proxy is deployed between the source Workload and the destination Workload, mTLS is terminated at the Proxy. \r\nThe Proxy can terminate mTLS, and add an `x5t` header containing the fingerprint of the client's X.509 Certificate that was used in the mTLS handshake. The self-signed WIT could be forwarded by the Proxy intact in a request header, together with the `x5t` header.  The destination Workload can then validate the Source Workload's self-signed WIT and the `x5t` using the information provided in the request, together with the corresponding Trust Domain's Trust Bundles.\r\n\r\nI'm not arguing that Self-signed WIT should be the only way to go, just that it should be an option to implement.",
          "createdAt": "2024-07-29T20:44:45Z",
          "updatedAt": "2024-07-29T20:49:40Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> ... Workload agents generate private key/public key pairs, construct CSRs, and request and receive X.509 Certificates, after passing through the Attestation steps described in the draft [WIMSE Architecture](https://datatracker.ietf.org/doc/draft-ietf-wimse-arch/) document. Workload agents also bootstrap and periodically update Trust Domains and their corresponding Trust Bundles.\r\n\r\nMy intuition is that the authority signed WIT would also be obtained during this stage. And the general model in the document remains unchanged. ",
          "createdAt": "2024-07-30T23:30:06Z",
          "updatedAt": "2024-07-30T23:30:06Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm a little worried that the Workload developers won't understand their responsibilities with respect to the many tokens, and could get it wrong, leading to bugs in issuance or validation that aren't necessarily in the core competence of the developer to resolve.  That's why I thought a single token signed by the Workload Agent's private key might offer a simpler protocol for the Workload developer, allowing them to focus primarily on the business logic.",
          "createdAt": "2024-08-02T20:57:30Z",
          "updatedAt": "2024-08-02T20:57:30Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "What identity is in the self-signed WIT? When you validate the key against the certificate do you also validate the identity in the WIT against an Identity in the certificate?  ",
          "createdAt": "2024-08-25T21:50:12Z",
          "updatedAt": "2024-08-25T21:50:12Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "`sub` would be the same as in the current draft:\r\n\r\n- `sub`: The subject of the token, which is the identity of the workload, represented by a URI.\r\n\r\nYes, the Destination Workload must validate that the `sub` matches the one in the X.509 certificate SAN.\r\n\r\nFor the self-signed WIT, `iss` would be the Workload Identity URI.  For the IdP-signed WIT, `iss` would be the IdP issuer URL.\r\n\r\nFor the self-signed WIT:\r\n\r\n1. The Proxy MUST validate the mTLS handshake protocol parameters match the client's x.509 certificate.\r\n2. The Proxy MAY validate the X.509 certificate chain to a known Trust Anchor for the X.509 certificate's SAN URI's TrustDomain.\r\n3. The Proxy MUST compute the `x5t#S256`, and append it to each request originating from that client TLS connection.  \r\n4. The Destination Workload MUST validate the JWS signature.\r\n5. The Destination Workload MUST validate the fingerprint from the Proxy matches the one computed from the leaf certificate found in the `x5c` chain.\r\n6. The Destination Workload MUST validate the `sub` in the WIT matches with the exactly-one-URI-SAN from the leaf certificate found the `x5c` certificate chain.  \r\n7. The Destination Workload MUST validate the `x5c` certificate chain to a known and trusted TrustAnchor for the SAN's TrustDomain, a.k.a. using the appropriate TrustDomain's known TrustBundle.\r\n\r\n",
          "createdAt": "2024-08-26T00:36:34Z",
          "updatedAt": "2024-08-26T00:36:34Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion: on hold for -01.",
          "createdAt": "2024-08-29T14:25:09Z",
          "updatedAt": "2024-08-29T14:25:09Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've proposed an alternate approach to conveying the Proof-of-possession based on Transport-layer security in Issue #75 ",
          "createdAt": "2024-10-29T20:16:28Z",
          "updatedAt": "2024-10-29T20:17:06Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOLJmm786aUI9I",
      "title": "Remove or make iss claim in WPT optional",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/68",
      "state": "OPEN",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "arndt-s"
      ],
      "labels": [],
      "body": "Now, `iss` claim in WPT is required and required to match the `sub` claim of the WIT.\r\n\r\nWith the `wth` claim (hash of WIT in WPT) this becomes kind of duplicate and we should consider to either:\r\n\r\n- make the `iss` claim in WPT optional\r\n- remove the `iss` claim from the WPT\r\n- other options ..\r\n",
      "createdAt": "2024-10-15T14:32:16Z",
      "updatedAt": "2024-12-05T15:55:04Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Decision: remove and forbid `iss`.",
          "createdAt": "2024-12-05T15:55:03Z",
          "updatedAt": "2024-12-05T15:55:03Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "I_kwDOLJmm786acFHI",
      "title": "Host name validation when WIT is used",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/69",
      "state": "OPEN",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Sec. 6, 1st bullet has \"Host name validation according to Section 5 MUST be performed.\" I think server-only \"standard\" TLS validation is sufficient to mitigate this threat, but this text implies that client host name validation is also needed.\r\n\r\ncc: @jsalowey ",
      "createdAt": "2024-10-16T08:18:19Z",
      "updatedAt": "2024-10-16T08:25:54Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 70,
      "id": "I_kwDOLJmm786acMYL",
      "title": "Middleboxes and PoP mitigations",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/70",
      "state": "OPEN",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Sec. 6.3 states that \"Mitigations listed in the previous section can be used to provide some protection from middle boxes.\" I don't think any of the mitigations is Sec. 6.2 are effective against a middlebox that replaces a part of the message not covered by PoP.\r\n\r\n@jsalowey ",
      "createdAt": "2024-10-16T08:30:22Z",
      "updatedAt": "2024-10-16T08:30:22Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 72,
      "id": "I_kwDOLJmm786adg3o",
      "title": "Relationship between Trust domain and iss claim",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/72",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Should the issuer (iss claim) be a restricted to be under the trust domain? ",
      "createdAt": "2024-10-16T10:33:48Z",
      "updatedAt": "2024-10-16T10:33:48Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 73,
      "id": "I_kwDOLJmm786aqskw",
      "title": "define WIMSE Server and WIMSE Client certificates",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/73",
      "state": "OPEN",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 5.1 uses normative text about extended key usage for WIMSE server  vs WIMSE client certificates. These concepts are not formally defined and a short paragraph clarifying what is meant by a WIMSE server vs WIMSE client certificate (e.g. WIMSE Client Certificates: WIMSE certificates used for client authentication, WIMSE Server Certificates: WIMSE certificates used for server authentication).\r\n\r\n",
      "createdAt": "2024-10-17T14:16:30Z",
      "updatedAt": "2024-10-17T14:16:30Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 74,
      "id": "I_kwDOLJmm786aquYj",
      "title": "Extended key usage normative language",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/74",
      "state": "CLOSED",
      "author": "PieterKas",
      "authorAssociation": "NONE",
      "assignees": [
        "yaronf"
      ],
      "labels": [],
      "body": "Comparing the normative language for WIMSE certificates and X.509 SVIDs appears to suggest that extended key usage MUST include both server and client auth extended key usage, while for WIMSE, it is optional and you can have one or the other. Is there a specific reason why we want to be more lenient in the WIMSE draft than in the SPIFFE drafts?",
      "createdAt": "2024-10-17T14:19:03Z",
      "updatedAt": "2024-12-05T15:31:05Z",
      "closedAt": "2024-12-05T15:31:05Z",
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO what we have right now is reasonable: if you're a server, include server auth EKU; if you're a client, include client auth EKU; if you're both include both. Arguably it's more flexible than what they have in SPIFFE, because some services may in fact be server-only.\r\n\r\nIf in the future we go through consolidation of WIMSE and SPIFFE (which I'm supportive of), we could change the language to be more stringent.",
          "createdAt": "2024-11-22T14:15:22Z",
          "updatedAt": "2024-11-22T14:15:22Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "I_kwDOLJmm786cS-1f",
      "title": "WIT with Confirmation (Proof-of-possession) referencing Transport-layer security",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/75",
      "state": "OPEN",
      "author": "kenmccracken-google",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This spec should support an Option that builds on secure Workload Transport-layer authentication.  Well-established protocols exist for Workload-to-Workload communication over mutually authenticated TLS 1.3.\r\n\r\nI would like to propose an `Option 3: Transport-layer Proof-of-possession`, with a reference to the TLS credential used in the `cnf` claim of the WIT, based on https://datatracker.ietf.org/doc/html/rfc8705#section-3.1.\r\n\r\n1. _In the section `The Workload Identity Token {#to-wit}`, change the description of `cnf` to the following:_\r\n\r\n* `cnf` : A confirmation claim containing either the public key of the workload OR a cryptographically strong hash of the X.509 certificate conveyed during Transport layer security. \r\n    * The public key `cnf` contains the jwk member as defined in {{Section 3.2 of RFC7800}}. The workload MUST prove possession of the corresponding private key when presenting the WIT to another party, which can be accomplished by using it in conjunction with one of the methods in {{dpop-esque-auth}} or {{http-sig-auth}}. As such, it MUST NOT be used as a bearer token and is not intended for use in the Authorization header.\r\n    * The X.509 certificate hash `cnf` contains the `x5t#S256` hash as described in [Section 3.1](https://datatracker.ietf.org/doc/html/rfc8705#section-3.1) of [[RFC8705](https://datatracker.ietf.org/doc/html/rfc8705)]. When this value is provided, Proof-of-possession is delegated to the Transport-layer. The receiving Workload MUST verify that the `x5t#S256` claim matches the hash of the Client's X.509 Certificate presented at the Transport-layer.\r\n\r\n2. _Add the following sub-section after `Option 2: Authentication Based on HTTP Message Signatures {#http-sig-auth}`:_\r\n\r\n### Option 3: Transport-layer Proof-of-possession\r\n\r\nIn the case where Workload-to-Workload communication is secured by Mutually-authenticated [Transport Layer Security 1.3](https://datatracker.ietf.org/doc/html/rfc8446#section-2), Proof-of-possession is conveyed via each Workload's `CertificateVerify` message. In this case, the Transport-layer guarantees that each Workload has already validated its Peer's Proof-of-possession of the Private Key. Proof-of-possession is conveyed during the TLS 1.3 handshake protocol using each peer's `Certificate` and `CertificateVerify` messages, along with other protocol messages transmitted. The Transport-layer must cache the SHA-256 hash of the validated Client `Certificate` and the first Subject Alternative Name (SAN) URI entry for use at the Application-layer. When the Destination Workload receives a WIT at the Application-layer with `cnf` claim with `x5t#S256` property, it MUST establish Proof-of-possession as follows:\r\n* Validate that the Certificate-bound WIT's `cnf` claim's `x5t#S256` property matches the cached SHA-256 hash of the validated Client Certificate.\r\n* Validate that the WIT's `sub` claim matches the first Subject Alternative Name (SAN) URI entry.\r\n\r\nThe first step proves that the WIT was issued to the holder of the PrivateKey for the X.509 Certificate presented by the client, and that Private Key was used to establish the mTLS session over which the WIT was transmitted. The second step validates that both the X.509 Certificate and the WIT were issued to the same Workload.",
      "createdAt": "2024-10-29T20:07:56Z",
      "updatedAt": "2024-11-06T19:09:47Z",
      "closedAt": null,
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "Do you see this as an alternate optimization which reuses the TLS handshake or is it in addition to the PoP.  Why would I do this instead of just using TLS?\r\n- TLS cert is not a \"WIMSE\" cert (not a WIMSE identifier URI SAN but some other format)\r\n- WIT contains additional information (not sure about that)? \r\n\r\nIt seems that some of the properties would be different.\r\n- Explicit binding to audience and other tokens/headers? \r\n- WIT can be used with any TLS channel from the same endpoint? \r\n\r\nLosing some of these properties is probably not be great.  Perhaps we can use TLS exported authenticators to bind to the application exchange. ",
          "createdAt": "2024-11-05T10:52:10Z",
          "updatedAt": "2024-11-05T10:52:10Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @jsalowey , thanks for your feedback and questions.  \r\n\r\n| Do you see this as an alternate optimization which reuses the TLS handshake or is it in addition to the PoP. \r\n\r\nYes, this is an optimization to reuse the TLS handshake's PoP.  \r\n\r\n| Why would I do this instead of just using TLS?\r\n\r\nThe WIT is an forwardable application tier credential.  The proxy can forward it to backend services.  The WIT may provide additional security context for the client's associated request, although they are not called out explicitly in this spec.  (The spec does not explicitly say claims like `aud` are disallowed from WIT, and I think we should keep this option open).\r\n\r\n| TLS cert is not a \"WIMSE\" cert\r\n\r\nCould you clarify what you mean?  I was thinking that in the case where a WIT contains a hash of the certificate in the \"cnf\", usually the TLS X.509 cert should be a \"WIMSE\" cert.  The constraint to only allow a hash of a WIMSE cert in the WIT could be optionally enforced by the IdP at WIT issuance time.  \r\n\r\n| WIT contains additional information (not sure about that)?\r\n\r\nI think this is optional but would suggest that possible extensions could be `aud` or `scope`.\r\n\r\n| Explicit binding to audience and other tokens/headers?\r\n\r\nCan we move these to the WIT?\r\n\r\n| WIT can be used with any TLS channel from the same endpoint?\r\n\r\nIn the case where `cnf` contains an `x5t#S256`, the WIT can be used on any TLS channel that originated using the same certificate. \r\n\r\n| Losing some of these properties is probably not be great. Perhaps we can use TLS exported authenticators to bind to the application exchange.\r\n\r\nThis could be an area of exploration. I haven't looked at using TLS exported authenticators for this use case.",
          "createdAt": "2024-11-06T19:09:46Z",
          "updatedAt": "2024-11-06T19:09:46Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOLJmm786fvUPF",
      "title": "Acks",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/issues/77",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yaronf"
      ],
      "labels": [],
      "body": "- Pieter\r\n- Daniel F.",
      "createdAt": "2024-11-21T15:42:56Z",
      "updatedAt": "2024-12-01T08:14:59Z",
      "closedAt": "2024-12-01T08:14:59Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOLJmm785wYsmO",
      "title": "org and email for BC",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/1",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-23T22:06:59Z",
      "updatedAt": "2024-07-03T16:51:05Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "b7821f7cdd84b868af81e2abbca0075f91353172",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "bc-pi-org-n-email",
      "headRefOid": "2aac2dd5d10eed3c802eeabbb1f52c2040b759e4",
      "closedAt": "2024-05-24T08:34:41Z",
      "mergedAt": "2024-05-24T08:34:41Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "fe0acb88d0b7b8289ab4bcab9cdecaa1cb1dc570"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 2,
      "id": "PR_kwDOLJmm785wYvaM",
      "title": "change dpop-based to dpop-inspired",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/2",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "nitpicking on words already but \"based\" has a meaning to me that I don't think we want to convey here.",
      "createdAt": "2024-05-23T22:13:43Z",
      "updatedAt": "2024-07-03T16:51:03Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "b7821f7cdd84b868af81e2abbca0075f91353172",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "bc-pi-inspiration-based-pr",
      "headRefOid": "1c266e05274275b977a458a0f69123e27f1107b5",
      "closedAt": "2024-05-24T08:36:07Z",
      "mergedAt": "2024-05-24T08:36:07Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "b12f822810b20f27b2be1a8ecfccf1cdb949c2c4"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Eventually I think/hope that \"DPoP\" won't even appear in this draft. ",
          "createdAt": "2024-05-23T22:24:36Z",
          "updatedAt": "2024-05-23T22:24:36Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, \"inspired\" is more correct.",
          "createdAt": "2024-05-24T08:35:58Z",
          "updatedAt": "2024-05-24T08:35:58Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 3,
      "id": "PR_kwDOLJmm785weFU0",
      "title": "Intro and high level architecture",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/3",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-24T14:02:55Z",
      "updatedAt": "2024-07-03T16:50:29Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "3b2b5b98a7de6696daf182873415cc21e9b6d259",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-intro",
      "headRefOid": "ae363fc314d5b06bcaa445873e6ab0dd5f8d1c39",
      "closedAt": "2024-05-29T12:08:29Z",
      "mergedAt": "2024-05-29T12:08:29Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "44d70b32dbee74cfd3b5dae6c5cd1225190d2bd9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm7858C-RL",
          "commit": {
            "abbreviatedOid": "e1edc7c"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Please feel free to just close my comments if they are too nit picking at this stage.",
          "createdAt": "2024-05-27T15:26:39Z",
          "updatedAt": "2024-05-27T15:38:19Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Reading this makes me feel like the arrow in above picture from Workload B <-> Identity Server is missing. Feel free to resolve if it's left out on purpose as it's optional.",
              "createdAt": "2024-05-27T15:26:39Z",
              "updatedAt": "2024-05-27T15:38:19Z"
            },
            {
              "originalPosition": 16,
              "body": "I think we should stick to one term - either `workload` or `service`. Using these two interchangeably may confuse readers. ",
              "createdAt": "2024-05-27T15:30:33Z",
              "updatedAt": "2024-05-27T15:38:19Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nIt is an explicit goal of this protocol that a service deployment can include both architectures across a multi chain call.\r\n```\r\nor do you indeed mean mTLS + TLS terminating middlebox? If that's the case I propose to rephrase the example to something like \"TLS terminating middlebox + mTLS\"",
              "createdAt": "2024-05-27T15:35:50Z",
              "updatedAt": "2024-05-27T15:38:19Z"
            },
            {
              "originalPosition": 74,
              "body": "This is very opinionated about authorization in my opinion (funny sentence \ud83d\ude04) . I propose to mention authz but not include PEP and PDP into the high level architecture. \r\nWhat do others think?",
              "createdAt": "2024-05-27T15:37:12Z",
              "updatedAt": "2024-05-27T15:39:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858ED4Y",
          "commit": {
            "abbreviatedOid": "e1edc7c"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:32:13Z",
          "updatedAt": "2024-05-27T20:32:13Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "I omitted it for visual clarity more than anything else. I guess I should add it.\r\n\r\nThere's a related discussion that we haven't had yet on how much we want to protect the API response. If we decide to sign it then Service B absolutely needs an identity key.",
              "createdAt": "2024-05-27T20:32:13Z",
              "updatedAt": "2024-05-27T20:32:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858ED8C",
          "commit": {
            "abbreviatedOid": "e1edc7c"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:32:37Z",
          "updatedAt": "2024-05-27T20:32:37Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Agreed. Note that this includes the document's title. Sigh.",
              "createdAt": "2024-05-27T20:32:37Z",
              "updatedAt": "2024-05-27T20:45:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858EEWq",
          "commit": {
            "abbreviatedOid": "e1edc7c"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:35:25Z",
          "updatedAt": "2024-05-27T20:35:26Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I meant it exactly like you wrote it: a single multi chain call including both architectures. (Except that maybe the word \"architecture\" is a bit off here.)",
              "createdAt": "2024-05-27T20:35:25Z",
              "updatedAt": "2024-05-27T20:35:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858EEvg",
          "commit": {
            "abbreviatedOid": "e1edc7c"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:38:01Z",
          "updatedAt": "2024-05-27T20:38:02Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "In what way is this opinionated in your opinion? :-) All I'm saying is that Service B is expected to make/enforce an authz decision. I'm just using common terminology from the policy world to do it.",
              "createdAt": "2024-05-27T20:38:02Z",
              "updatedAt": "2024-05-27T20:38:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858EHY-",
          "commit": {
            "abbreviatedOid": "e1edc7c"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-27T20:52:23Z",
          "updatedAt": "2024-05-27T20:52:23Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "On second thoughts, even in the group charter we called it \"service to service\". I will let others chime in.",
              "createdAt": "2024-05-27T20:52:23Z",
              "updatedAt": "2024-05-27T20:52:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858FN4C",
          "commit": {
            "abbreviatedOid": "e1edc7c"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T05:03:12Z",
          "updatedAt": "2024-05-28T05:03:13Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I'm in favor of switching to workload to workload vs service.  I feel that the workload term is more generic and its what we are using elsewhere.  I believe the way we are using the they are synonymous.  ",
              "createdAt": "2024-05-28T05:03:13Z",
              "updatedAt": "2024-05-28T05:03:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858MKFT",
          "commit": {
            "abbreviatedOid": "ae363fc"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm in favor of merging this, I think we can work out the details later. ",
          "createdAt": "2024-05-28T18:13:05Z",
          "updatedAt": "2024-05-28T18:13:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm7858RD9e",
          "commit": {
            "abbreviatedOid": "ae363fc"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-29T09:25:58Z",
          "updatedAt": "2024-05-29T09:25:58Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Let's discuss on Thursday. Resolving this for now to not block the PR.",
              "createdAt": "2024-05-29T09:25:58Z",
              "updatedAt": "2024-05-29T09:25:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858REI2",
          "commit": {
            "abbreviatedOid": "ae363fc"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-29T09:26:17Z",
          "updatedAt": "2024-05-29T09:26:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 4,
      "id": "PR_kwDOLJmm785weJKH",
      "title": "updated contact information",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/4",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-24T14:10:48Z",
      "updatedAt": "2024-07-03T16:51:02Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "3b2b5b98a7de6696daf182873415cc21e9b6d259",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "js-authorinfo",
      "headRefOid": "3bd5f999eb183491fd4c4834e6a8c9ab89f5fe81",
      "closedAt": "2024-05-24T17:18:16Z",
      "mergedAt": "2024-05-24T17:18:16Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "31c21a7ef10032b6e306f7a25bb736cf4cea7459"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 5,
      "id": "PR_kwDOLJmm785w797i",
      "title": "change REST to HTTP",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/5",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There's nothing necessarily RESTful about this nor should it be limited to REST. Let's just not use the term. \r\n\r\nhttps://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/ is a fun semi-related read, if you have or can find the time.",
      "createdAt": "2024-05-29T21:29:17Z",
      "updatedAt": "2024-07-03T16:50:28Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "44d70b32dbee74cfd3b5dae6c5cd1225190d2bd9",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "bc-pi-rest2http",
      "headRefOid": "81b0306f553ec0a3325d369c3e286bba045b4c98",
      "closedAt": "2024-05-30T14:59:47Z",
      "mergedAt": "2024-05-30T14:59:47Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "fe384946b2661eb209c80ca47361bdcb2482b195"
      },
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Quoting the article:\r\n\r\n> I was young at the time, and the whole [discussion] struck me as opaque, puritanical and alienating, so I pretty much gave up on the whole idea of REST: it was something condescending people fought about on the internet.\r\n\r\nI am not as young but I agree with this sentiment. Having said that, I guess a standard needs to be reasonably precise in its usage of terminology, and so I accept the PR.",
          "createdAt": "2024-05-30T09:21:01Z",
          "updatedAt": "2024-05-30T09:21:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm7858cHQu",
          "commit": {
            "abbreviatedOid": "b61aed6"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-05-30T09:22:34Z",
          "updatedAt": "2024-05-30T09:23:01Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I don't think I've ever heard the term \"HTTP call\". Can we think of a better term?",
              "createdAt": "2024-05-30T09:22:34Z",
              "updatedAt": "2024-05-30T09:23:01Z"
            },
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nAssume that Service A needs to call Service B. For simplicity, this document focuses on HTTP-based services,\r\n```",
              "createdAt": "2024-05-30T09:22:54Z",
              "updatedAt": "2024-05-30T09:23:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7858dQYt",
          "commit": {
            "abbreviatedOid": "48340ef"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T11:45:10Z",
          "updatedAt": "2024-05-30T11:45:10Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I feel like I hear the term used all the time but that doesn't necessarily mean it's widely used or understood. How about just good ol' \"HTTP request\"? \r\n\r\n```suggestion\r\n* Workload A makes an HTTP call into Workload B. This is a regular HTTP request, with the additional protection\r\n```",
              "createdAt": "2024-05-30T11:45:10Z",
              "updatedAt": "2024-05-30T11:45:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOLJmm785xAp5M",
      "title": "add arndts org and email",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/6",
      "state": "MERGED",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-30T13:07:36Z",
      "updatedAt": "2024-07-03T16:50:56Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "44d70b32dbee74cfd3b5dae6c5cd1225190d2bd9",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "arndts/add-org-and-email",
      "headRefOid": "71d16d9f4d57af4f26058ec7421d34dfe4f2d101",
      "closedAt": "2024-05-30T14:56:26Z",
      "mergedAt": "2024-05-30T14:56:26Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "4d2f2a45156cb78b26569b10336455f12f464ca4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 7,
      "id": "PR_kwDOLJmm785xYGV-",
      "title": "Section on WIMSE Identity",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/7",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a section on WIMSE identity format.  This may eventually go in another document such as the arch document, but I felt it was an important topic to get a start on. ",
      "createdAt": "2024-06-04T05:18:29Z",
      "updatedAt": "2024-07-03T16:50:51Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "fe384946b2661eb209c80ca47361bdcb2482b195",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "js-wimse-id",
      "headRefOid": "85de445e969f50aa7f40fc0720a1f6eef4fb364c",
      "closedAt": "2024-07-01T15:57:56Z",
      "mergedAt": "2024-07-01T15:57:56Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "262caeb7113333ae287c7f3609fa130d2d4fa656"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/yaronf/wimse-s2s/pull/8/files#diff-99cedafce05f1e1fafafbc415a81b34da2df6b52ad13892735fbdab5c43abf08R239 is kinda sorta related even if it doesn't actually say much \r\n\r\nedit: now can be found at https://github.com/yaronf/wimse-s2s/blob/main/draft-sheffer-wimse-s2s-protocol.md#iana-considerations",
          "createdAt": "2024-06-06T21:57:03Z",
          "updatedAt": "2024-06-29T14:45:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm7859Dn9q",
          "commit": {
            "abbreviatedOid": "6824c30"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Two comments at a high level:\r\n\r\n* The section probably belongs in the architecture spec and not here, but I'm OK with it for now.\r\n* I think the SPIFFE Identity is good enough and we can reuse it rather than defining our own, which seems to be an exact clone.",
          "createdAt": "2024-06-05T05:58:09Z",
          "updatedAt": "2024-06-05T06:06:55Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I'm not sure. A particular deployment will have many workloads. Some can have certs of type A, some certs of type B. Each certs only has one SAN, but so what?",
              "createdAt": "2024-06-05T05:58:09Z",
              "updatedAt": "2024-06-05T06:06:55Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nThe trust domain is a locally defined string that is compliant with WIMSE naming schemes. The issuer of WIMSE credentials is tied to a single trust domain. The validator of a WIMSE ID token or certificate MUST check that the issuer of the credential is permitted to issue credentials with the specified trust domains and MUST validate that there are no collisions in the list of supported trust domains.\r\n```",
              "createdAt": "2024-06-05T05:59:56Z",
              "updatedAt": "2024-06-05T06:06:55Z"
            },
            {
              "originalPosition": 14,
              "body": "Why can't an issuer be associated with multiple trust domains? Maybe it's not a best practice, but I don't see a reason to disallow it.\r\n\r\nThe \"must validate no collisions\" is an implementation detail IMO.",
              "createdAt": "2024-06-05T06:02:55Z",
              "updatedAt": "2024-06-05T06:06:55Z"
            },
            {
              "originalPosition": 16,
              "body": "If we're copying the SPIFFE Identity spec, why not simply reference it and be done? I think it's legitimate to have this dependency on them.",
              "createdAt": "2024-06-05T06:04:26Z",
              "updatedAt": "2024-06-05T06:06:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859ReRF",
          "commit": {
            "abbreviatedOid": "6824c30"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T11:51:54Z",
          "updatedAt": "2024-06-06T11:51:54Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "facilitate future referenceability a la https://github.com/yaronf/wimse-s2s/pull/8/files#r1628701212\r\n```suggestion\r\n# WIMSE Identity {#whimsical-identity}\r\n```",
              "createdAt": "2024-06-06T11:51:54Z",
              "updatedAt": "2024-06-06T11:51:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CGMG",
          "commit": {
            "abbreviatedOid": "6824c30"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T01:00:45Z",
          "updatedAt": "2024-06-13T01:00:45Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Yea we can probably relax that restriction. It should probably be only one can be in any particular cert. ",
              "createdAt": "2024-06-13T01:00:45Z",
              "updatedAt": "2024-06-13T01:00:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CGx_",
          "commit": {
            "abbreviatedOid": "6824c30"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T01:03:49Z",
          "updatedAt": "2024-06-13T01:03:49Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "We definitely should reference the spec.  I tried to limit what was discussed here, but if people do not think it adds anything it can be removed. . ",
              "createdAt": "2024-06-13T01:03:49Z",
              "updatedAt": "2024-06-13T01:03:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-G2I0",
          "commit": {
            "abbreviatedOid": "8a0eeb0"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T12:58:14Z",
          "updatedAt": "2024-06-13T12:58:14Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "+1 that workloads can be part of multiple trust domains but SVIDs (in this case X509 certs) are only part of one.",
              "createdAt": "2024-06-13T12:58:14Z",
              "updatedAt": "2024-06-13T12:58:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-G2_z",
          "commit": {
            "abbreviatedOid": "8a0eeb0"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T12:59:25Z",
          "updatedAt": "2024-06-13T12:59:25Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Should we add here the fact that the domain part is not governed by a central authority like it is done in DNS?",
              "createdAt": "2024-06-13T12:59:25Z",
              "updatedAt": "2024-06-13T12:59:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-K9Cf",
          "commit": {
            "abbreviatedOid": "8a0eeb0"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T20:02:16Z",
          "updatedAt": "2024-06-13T20:02:16Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Is this how it's done in SPIFFE? How does it work in cross-domain cases?",
              "createdAt": "2024-06-13T20:02:16Z",
              "updatedAt": "2024-06-13T20:02:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-mWpt",
          "commit": {
            "abbreviatedOid": "6824c30"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-17T22:07:48Z",
          "updatedAt": "2024-06-17T22:07:48Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "updated",
              "createdAt": "2024-06-17T22:07:48Z",
              "updatedAt": "2024-06-17T22:07:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-mXOn",
          "commit": {
            "abbreviatedOid": "6824c30"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-17T22:09:26Z",
          "updatedAt": "2024-06-17T22:09:26Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Added a link to the spec, not sure what the stable ling to SPIFFE spec is, will add a reference when we get clarity. ",
              "createdAt": "2024-06-17T22:09:26Z",
              "updatedAt": "2024-06-17T22:09:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-mXYU",
          "commit": {
            "abbreviatedOid": "8a0eeb0"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-17T22:10:02Z",
          "updatedAt": "2024-06-17T22:10:03Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I modified the text here.  I think this is probably an area for expanded discussion. ",
              "createdAt": "2024-06-17T22:10:02Z",
              "updatedAt": "2024-06-17T22:10:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785__szz",
          "commit": {
            "abbreviatedOid": "487ca9f"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think this summarizes well what we discussed yesterday. See my proposed changes.\r\n\r\nRemaining question, either for this PR or for an issue: Is the workload identity also used in `iss` fields? In `aud`? As the subject of the CA certificate?",
          "createdAt": "2024-06-28T08:48:42Z",
          "updatedAt": "2024-06-28T09:01:44Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThis document defines a workload identity as a URI {{!RFC3986}}. This URI is used in the subject fields in the certificates and tokens defined later in this document. This specification treats the URI as opaque. The format of the URI and the namespace for the URI are chosen by the issuer of the token. Other specifications may define specific URI structures for particular use cases. An example of a defined identity format is the SPIFFE ID [SPIFFE-ID](https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE-ID.md).\r\n```\r\n\r\nI think \"URI string\" is redundant, and the word URI suffices.",
              "createdAt": "2024-06-28T08:48:42Z",
              "updatedAt": "2024-06-28T09:01:44Z"
            },
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nA workload identity only has meaning within the scope of a specific issuer. Two identities of the same value issued by different issuers may or may not refer to the same workload. In order to avoid collisions identity URIs SHOULD specify, in the URI's \"authority\" field, the trust domain associated with an issuer that is selected from a global name space such as host domains. However, the validator of an identity credential MUST make sure that they are using the correct issuer credential to verify the identity credential and that the issuer is trusted to issue tokens for the defined trust domain.\r\n```\r\n\r\nThe URI doesn't include \"a concept\", it includes a concrete field that maps to the concept.",
              "createdAt": "2024-06-28T08:56:16Z",
              "updatedAt": "2024-06-28T09:01:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786ACzFI",
          "commit": {
            "abbreviatedOid": "487ca9f"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T14:40:06Z",
          "updatedAt": "2024-06-28T14:40:06Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Accepted your comment.  I'll create an issue for your other topic. ",
              "createdAt": "2024-06-28T14:40:06Z",
              "updatedAt": "2024-06-28T14:40:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786AFPnd",
          "commit": {
            "abbreviatedOid": "487ca9f"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-28T19:54:54Z",
          "updatedAt": "2024-06-28T19:54:54Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Applied suggestion.",
              "createdAt": "2024-06-28T19:54:54Z",
              "updatedAt": "2024-06-28T19:54:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786AITSl",
          "commit": {
            "abbreviatedOid": "bc4f19f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-29T15:01:12Z",
          "updatedAt": "2024-06-29T15:01:13Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I'm rather unsure of the wording or terminology but the URI format/namespace/etc is chosen by a higher level entity than the issuer of the token. In the WPT http://www.sheffer.org/wimse-s2s/draft-sheffer-wimse-s2s-protocol.html#section-3.2-2.2.2.1.1 case, for example, the issuer of that token is the workload itself, which has no say over the URIs used in the system.  Even the \"Identity Server\" is probably given a URI as it's identity in the over all system.\r\n```suggestion\r\nThis document defines a workload identity as a URI {{!RFC3986}}. This URI is used in the subject fields in the certificates and tokens defined later in this document. This specification treats the URI as opaque. The format of the URI and the namespace for the URI are at the discretion of the deployment at large. Other specifications may define specific URI structures for particular use cases. An example of a defined identity format is the SPIFFE ID [SPIFFE-ID](https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE-ID.md).\r\n```",
              "createdAt": "2024-06-29T15:01:13Z",
              "updatedAt": "2024-06-29T15:01:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786AJwVT",
          "commit": {
            "abbreviatedOid": "bc4f19f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-30T12:21:15Z",
          "updatedAt": "2024-06-30T12:21:15Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Unresolving conversation as I believe the suggested change or something similar is still needed. ",
              "createdAt": "2024-06-30T12:21:15Z",
              "updatedAt": "2024-06-30T12:21:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786AJwa0",
          "commit": {
            "abbreviatedOid": "bc4f19f"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": " for posterity and everything \r\n \r\nhttps://github.com/yaronf/wimse-s2s/pull/7/files#r1659855931",
          "createdAt": "2024-06-30T12:23:11Z",
          "updatedAt": "2024-06-30T12:42:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm786AJxge",
          "commit": {
            "abbreviatedOid": "bc4f19f"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved, assuming Brian's \"deployment at large\" change is incorporated.",
          "createdAt": "2024-06-30T12:48:04Z",
          "updatedAt": "2024-06-30T12:48:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm786AQPWI",
          "commit": {
            "abbreviatedOid": "85de445"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-01T15:57:40Z",
          "updatedAt": "2024-07-01T15:57:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOLJmm785xmIuS",
      "title": "Flesh out The Workload Identity Token section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/8",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> Yaron Sheffer\r\n  [8:31 AM May 30 in slack]\r\nTo summarize the near term plan:\r\nJoe: security considerations and interaction with TLS\r\nBrian: ID Token and DPoP-inspired\r\nYaron: Message Signatures\r\n\r\nThis PR is the \"ID Token\" part. \r\n\r\nA preview editors' copy of this PR can be seen at http://www.sheffer.org/wimse-s2s/bc-workload-id-token/draft-sheffer-wimse-s2s-protocol.html ",
      "createdAt": "2024-06-05T19:20:42Z",
      "updatedAt": "2024-07-03T16:50:26Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "fe384946b2661eb209c80ca47361bdcb2482b195",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "bc-workload-id-token",
      "headRefOid": "aed82f7ca3d13f266c7096d24ee32469915ba4d7",
      "closedAt": "2024-06-13T22:42:46Z",
      "mergedAt": "2024-06-13T22:42:46Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "5cdb022bf90b10d8ca134be05ff3faa4fa96124c"
      },
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Also, as discussed, please add a header definition in the following section.",
          "createdAt": "2024-06-06T21:48:39Z",
          "updatedAt": "2024-06-06T21:48:39Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi Can you also include the private key of the service (the one that corresponds to the public key included in the WIT) so we can extend the example, e.g. for message sigs.",
          "createdAt": "2024-06-07T18:55:35Z",
          "updatedAt": "2024-06-07T18:55:35Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> @bc-pi Can you also include the private key of the service (the one that corresponds to the public key included in the WIT) so we can extend the example, e.g. for message sigs.\r\n\r\nYeah, I'll add it somewhere with those examples. In the meantime though:\r\n\r\n```\r\n{\r\n \"kty\":\"OKP\",\r\n \"crv\":\"Ed25519\",\r\n \"x\":\"_amRC3YrYbHhH1RtYrL8cSmTDMhYtOUTG78cGTR5ezk\",\r\n \"d\":\"G4lGAYFtFq5rwyjlgSIRznIoCF7MtKDHByyUUZCqLiA\"\r\n}\r\n```",
          "createdAt": "2024-06-07T20:15:46Z",
          "updatedAt": "2024-06-07T20:15:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm7859NfuZ",
          "commit": {
            "abbreviatedOid": "aa5d874"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-06-06T02:29:18Z",
          "updatedAt": "2024-06-06T05:02:54Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Add a reference to Joe's new section, when we merge that PR.",
              "createdAt": "2024-06-06T02:29:18Z",
              "updatedAt": "2024-06-06T05:02:54Z"
            },
            {
              "originalPosition": 35,
              "body": "I know people don't like explicit rules on expiration, but should we say something about expectations here? Something like \"WITs should be refreshed regularly, e.g. on the order of hours\".",
              "createdAt": "2024-06-06T02:31:44Z",
              "updatedAt": "2024-06-06T05:02:54Z"
            },
            {
              "originalPosition": 57,
              "body": "Shouldn't we encourage kid's that are targeted towards automation, e.g. plain random strings?",
              "createdAt": "2024-06-06T02:34:16Z",
              "updatedAt": "2024-06-06T05:02:54Z"
            },
            {
              "originalPosition": 70,
              "body": "This key would shortly be used to sign its own JWTs (or HTTP messages). Doesn't it make sense to include a \"kid\" for it, too?",
              "createdAt": "2024-06-06T05:01:24Z",
              "updatedAt": "2024-06-06T05:02:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859RYwg",
          "commit": {
            "abbreviatedOid": "aa5d874"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T11:40:11Z",
          "updatedAt": "2024-06-06T11:40:12Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "say something here ish about needing to prove possession of the cnf.jwk key in order to use/present the WIT... ",
              "createdAt": "2024-06-06T11:40:12Z",
              "updatedAt": "2024-06-06T11:40:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859RekU",
          "commit": {
            "abbreviatedOid": "aa5d874"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T11:52:33Z",
          "updatedAt": "2024-06-06T11:52:33Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "https://github.com/yaronf/wimse-s2s/pull/7/files#r1629377450 could help ",
              "createdAt": "2024-06-06T11:52:33Z",
              "updatedAt": "2024-06-06T11:52:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859Rluk",
          "commit": {
            "abbreviatedOid": "aa5d874"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T12:06:58Z",
          "updatedAt": "2024-06-06T12:06:58Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "I am one of those people (and recently have been watching a confused, confusing, and painful conversation in a different WG of a different SDO play out around some somewhat arbitrary but explicit time windows) but something general and not normative like the text you suggested seems like a reasonable addition. ",
              "createdAt": "2024-06-06T12:06:58Z",
              "updatedAt": "2024-06-06T12:06:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859Rn9x",
          "commit": {
            "abbreviatedOid": "aa5d874"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T12:11:17Z",
          "updatedAt": "2024-06-06T12:11:17Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "in the JWK itself plain random strings in examples start to look like maybe just another part of the key. \r\nhttps://github.com/yaronf/wimse-s2s/pull/8/files#diff-99cedafce05f1e1fafafbc415a81b34da2df6b52ad13892735fbdab5c43abf08R214 \r\nso I arbitrarily chose something that I thought wouldn't blend in as much. But I'm not married to it.\r\n",
              "createdAt": "2024-06-06T12:11:17Z",
              "updatedAt": "2024-06-06T12:11:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859Ro77",
          "commit": {
            "abbreviatedOid": "aa5d874"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T12:13:19Z",
          "updatedAt": "2024-06-06T12:13:19Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Thought about that but (without having gone deep into the details) didn't see the need for a kid here as the relationship will be implied and the key will be right there in the WIT that will be presented alongside the other JWT or HTTP signature. ",
              "createdAt": "2024-06-06T12:13:19Z",
              "updatedAt": "2024-06-06T12:46:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859XJoU",
          "commit": {
            "abbreviatedOid": "aa5d874"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T21:10:35Z",
          "updatedAt": "2024-06-06T21:10:35Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "@yaronf's suggested suggestion\r\n```suggestion\r\n    * `exp`: The expiration time of the token (as defined in {{Section 4.1.4 of RFC7519}}).\r\n      WITs should be refreshed regularly, e.g. on the order of hours.\r\n```",
              "createdAt": "2024-06-06T21:10:35Z",
              "updatedAt": "2024-06-06T21:10:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859XVlb",
          "commit": {
            "abbreviatedOid": "aa5d874"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T21:46:29Z",
          "updatedAt": "2024-06-06T21:46:29Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "As we discussed, `jwk` allows you to include a `kid`. So I'm fine with not mentioning it.",
              "createdAt": "2024-06-06T21:46:29Z",
              "updatedAt": "2024-06-06T21:46:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859XagC",
          "commit": {
            "abbreviatedOid": "16e6b2c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T22:05:44Z",
          "updatedAt": "2024-06-06T22:05:45Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "my own suggestion from https://github.com/yaronf/wimse-s2s/pull/8/files#r1629359149\r\n```suggestion\r\n    * `cnf`: A confirmation claim containing the public key of the workload using the `jwk` member as defined in {{Section 3.2 of RFC7800}}.\r\n     The workload MUST prove possession of the corresponding private key when presenting the WIT to another party. \r\n```",
              "createdAt": "2024-06-06T22:05:45Z",
              "updatedAt": "2024-06-06T22:06:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859Xb7Y",
          "commit": {
            "abbreviatedOid": "16e6b2c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-06T22:11:45Z",
          "updatedAt": "2024-06-06T22:11:46Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "https://github.com/yaronf/wimse-s2s/pull/8/files#r1630317742",
              "createdAt": "2024-06-06T22:11:45Z",
              "updatedAt": "2024-06-06T22:11:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859Y19U",
          "commit": {
            "abbreviatedOid": "592c2ab"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-07T05:29:49Z",
          "updatedAt": "2024-06-07T05:29:50Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "I think this statement is not useful because most developers don't know what it means and whether they're even compliant with this MUST. Moreover, the next 3 sections will each include a (sometimes implicit) proof of possession.",
              "createdAt": "2024-06-07T05:29:49Z",
              "updatedAt": "2024-06-07T05:29:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859fGrW",
          "commit": {
            "abbreviatedOid": "592c2ab"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-07T20:22:13Z",
          "updatedAt": "2024-06-07T20:22:13Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "I'd like to keep it to call attention to the need to do something other than just accept this as a bearer token. RFC7800 is not super well known and is a little opaque. And not even clear (to me anyway) if the presence of the cnf requires PoP. \r\n\r\nWhat about mentioning or referencing the next sections to give context about how one would be compliant with this MUST?",
              "createdAt": "2024-06-07T20:22:13Z",
              "updatedAt": "2024-06-07T20:22:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859fwSl",
          "commit": {
            "abbreviatedOid": "592c2ab"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-07T22:47:12Z",
          "updatedAt": "2024-06-07T22:47:12Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Yes, please refer to the next sections. But maybe also reverse the sense of the MUST: the WIT MUST NOT be used as a bearer token. Instead, it should be used in conjunction with one of the methods in sections foo, bar, and baz.",
              "createdAt": "2024-06-07T22:47:12Z",
              "updatedAt": "2024-06-07T22:47:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859rBEb",
          "commit": {
            "abbreviatedOid": "3e8700e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T17:51:45Z",
          "updatedAt": "2024-06-10T17:51:45Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "will do",
              "createdAt": "2024-06-10T17:51:45Z",
              "updatedAt": "2024-06-10T17:51:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CH4X",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T01:09:47Z",
          "updatedAt": "2024-06-13T01:09:47Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "+1 for WIT",
              "createdAt": "2024-06-13T01:09:47Z",
              "updatedAt": "2024-06-13T01:09:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CJAi",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-13T01:15:35Z",
          "updatedAt": "2024-06-13T01:15:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm785-EATU",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T07:44:24Z",
          "updatedAt": "2024-06-13T07:44:25Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "If you want it to be a modern+shiny structured field value (RFC 8941), I think you need colons around the base64 text.",
              "createdAt": "2024-06-13T07:44:24Z",
              "updatedAt": "2024-06-13T07:44:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-EYz6",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T08:09:04Z",
          "updatedAt": "2024-06-13T08:09:04Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "SPIFFE doesn't require the `iss` claim and I don't think we should add it here. Without it validators need to make use of the trust bundle to validate tokens and cannot fall back to OIDC+JWKS.",
              "createdAt": "2024-06-13T08:09:04Z",
              "updatedAt": "2024-06-13T08:09:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-G4F-",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T13:01:17Z",
          "updatedAt": "2024-06-13T13:01:18Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "Thinking out loud: Can it be a JWE too?",
              "createdAt": "2024-06-13T13:01:17Z",
              "updatedAt": "2024-06-13T13:01:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-G4xd",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T13:02:23Z",
          "updatedAt": "2024-06-13T13:02:24Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nThe WIT MUST NOT be used as a single bearer token. Instead, it should be used in conjunction with one of the methods in {{dpop-esque-auth}} or {{http-sig-auth}}.\r\n```\r\nOtherwise it sounds like it should not be put into the Authorization header at all.",
              "createdAt": "2024-06-13T13:02:23Z",
              "updatedAt": "2024-06-13T13:02:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-Hrxq",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T14:17:28Z",
          "updatedAt": "2024-06-13T14:17:29Z",
          "comments": [
            {
              "originalPosition": 159,
              "body": "OK, this is not SFV. Sad.",
              "createdAt": "2024-06-13T14:17:28Z",
              "updatedAt": "2024-06-13T14:17:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-H4hW",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T14:35:34Z",
          "updatedAt": "2024-06-13T14:35:34Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "\"let's ignore @arndt-s\" - @yaronf  :) ",
              "createdAt": "2024-06-13T14:35:34Z",
              "updatedAt": "2024-06-13T14:35:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-IBII",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T14:48:10Z",
          "updatedAt": "2024-06-13T14:48:10Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "Discussed offline.",
              "createdAt": "2024-06-13T14:48:10Z",
              "updatedAt": "2024-06-13T14:48:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-ICYu",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T14:50:08Z",
          "updatedAt": "2024-06-13T14:50:08Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "How about this wording?\r\n```suggestion\r\nWITs should always be used in conjunction with {{dpop-esque-auth}} or {{http-sig-auth}}. For this reason it MUST NOT be used as a bearer token and not go into the `Authorization` header.\r\n```",
              "createdAt": "2024-06-13T14:50:08Z",
              "updatedAt": "2024-06-13T14:50:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-MPlM",
          "commit": {
            "abbreviatedOid": "8bc2396"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T22:40:31Z",
          "updatedAt": "2024-06-13T22:40:31Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "thanks @arndt-s - using some of your wording there and some of my old wording mixed together to hopefully not be too terrible. But we can revisit later, if need be. \r\n```suggestion\r\n     The workload MUST prove possession of the corresponding private key when presenting the WIT to another party, which can be accomplished by using it in conjunction with one of the methods in {{dpop-esque-auth}} or {{http-sig-auth}}. As such, it MUST NOT be used as a bearer token and is not intended for use in the `Authorization` header.\r\n```\r\n\r\n",
              "createdAt": "2024-06-13T22:40:31Z",
              "updatedAt": "2024-06-13T22:40:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 9,
      "id": "PR_kwDOLJmm785x1uuy",
      "title": "Initial version of Message Signatures section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/9",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A profile of the Message Signatures RFC. ",
      "createdAt": "2024-06-07T21:56:20Z",
      "updatedAt": "2024-07-03T16:50:27Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "fe384946b2661eb209c80ca47361bdcb2482b195",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-message-sig",
      "headRefOid": "94a774f3e71762bbcdf84aa4034ba620cd9f30df",
      "closedAt": "2024-06-13T16:29:44Z",
      "mergedAt": "2024-06-13T16:29:44Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "8283decbecd40d976958c0af8c30b8da3e7dc447"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm7859rPbW",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T18:22:01Z",
          "updatedAt": "2024-06-10T18:22:01Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "should we include `Txn-Token`? A fair number of folks seem to think it might be used to convey transational context info https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-01.html#name-txn-token-http-header ",
              "createdAt": "2024-06-10T18:22:01Z",
              "updatedAt": "2024-06-10T18:22:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859rQGK",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T18:23:42Z",
          "updatedAt": "2024-06-10T18:23:42Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "The Authorization header is only applicable to requests, no?  \r\n```suggestion\r\n```",
              "createdAt": "2024-06-10T18:23:42Z",
              "updatedAt": "2024-06-10T18:23:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859rQ4A",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T18:25:41Z",
          "updatedAt": "2024-06-10T18:25:41Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "above it says that, \"the `keyid` parameter SHOULD NOT be used.\" but there's a keyid in this line of the example ",
              "createdAt": "2024-06-10T18:25:41Z",
              "updatedAt": "2024-06-10T18:25:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859rU4t",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T18:34:49Z",
          "updatedAt": "2024-06-10T18:34:49Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "c3BpZmZlOi8vcmVhbG0uZXhhbXBsZS5jb20vc3ZjYmMxMjM= decodes to `spiffe://realm.example.com/svcbc123` which doesn't seem right for HTTP basic. To the extent that HTTP basic even seems right in an example like this. ",
              "createdAt": "2024-06-10T18:34:49Z",
              "updatedAt": "2024-06-10T18:34:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859rVZc",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T18:36:02Z",
          "updatedAt": "2024-06-10T18:36:02Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "also says `alg` is required above but doesn't seem to be in the example ",
              "createdAt": "2024-06-10T18:36:02Z",
              "updatedAt": "2024-06-10T20:11:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859rVqE",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-10T18:36:37Z",
          "updatedAt": "2024-06-10T18:36:37Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "looks like only example of a request right now?",
              "createdAt": "2024-06-10T18:36:37Z",
              "updatedAt": "2024-06-10T20:11:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859w7x3",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-11T10:08:27Z",
          "updatedAt": "2024-06-11T10:08:27Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "> should we include `Txn-Token`? A fair number of folks seem to think it might be used to convey transational context info https://www.ietf.org/archive/id/draft-ietf-oauth-transaction-tokens-01.html#name-txn-token-http-header\r\n\r\nYes.",
              "createdAt": "2024-06-11T10:08:27Z",
              "updatedAt": "2024-06-11T10:08:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859w9ld",
          "commit": {
            "abbreviatedOid": "01666b9"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-11T10:11:56Z",
          "updatedAt": "2024-06-11T10:11:56Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "> above it says that, \"the `keyid` parameter SHOULD NOT be used.\" but there's a keyid in this line of the example\r\n\r\nThis was a problem with my own implementation of Message Sigs, now fixed.",
              "createdAt": "2024-06-11T10:11:56Z",
              "updatedAt": "2024-06-11T10:11:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859w_s1",
          "commit": {
            "abbreviatedOid": "01666b9"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-11T10:16:15Z",
          "updatedAt": "2024-06-11T10:16:15Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "> also says `alg` is required above but doesn't seem to be in the example\r\n\r\nIn fact I think that `alg` as a Message Sig parameter is a mistake and a vulnerability waiting to happen (because verifiers would trust this field even though they lack context, similarly to the \"none\" issue with JWTs. IMO an algorithm should be strongly bound to a key. Can we make the `alg` field mandatory within the JWK?",
              "createdAt": "2024-06-11T10:16:15Z",
              "updatedAt": "2024-06-11T10:16:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859xAb4",
          "commit": {
            "abbreviatedOid": "01666b9"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-11T10:17:49Z",
          "updatedAt": "2024-06-11T10:17:49Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "> c3BpZmZlOi8vcmVhbG0uZXhhbXBsZS5jb20vc3ZjYmMxMjM= decodes to `spiffe://realm.example.com/svcbc123` which doesn't seem right for HTTP basic. To the extent that HTTP basic even seems right in an example like this.\r\n\r\n@bc-pi I need your help with this one. (And I thought that the string also includes a \"password\").",
              "createdAt": "2024-06-11T10:17:49Z",
              "updatedAt": "2024-06-11T10:17:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859xs0Q",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-11T11:38:35Z",
          "updatedAt": "2024-06-11T11:38:36Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Added the response, signed by the responder of course.",
              "createdAt": "2024-06-11T11:38:36Z",
              "updatedAt": "2024-06-11T11:38:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CKU6",
          "commit": {
            "abbreviatedOid": "1cc5aac"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T01:20:57Z",
          "updatedAt": "2024-06-13T01:20:57Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Do we envision cases where the WIT would not be included?  ",
              "createdAt": "2024-06-13T01:20:57Z",
              "updatedAt": "2024-06-13T01:20:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CLPu",
          "commit": {
            "abbreviatedOid": "1cc5aac"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T01:23:58Z",
          "updatedAt": "2024-06-13T01:23:58Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Shouldn't the example include the WIT?",
              "createdAt": "2024-06-13T01:23:58Z",
              "updatedAt": "2024-06-13T01:23:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-DE5d",
          "commit": {
            "abbreviatedOid": "1cc5aac"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T05:28:30Z",
          "updatedAt": "2024-06-13T05:28:30Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "@jsalowey No I don't, just waiting for the header definition from @bc-pi.",
              "createdAt": "2024-06-13T05:28:30Z",
              "updatedAt": "2024-06-13T05:28:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-DFHs",
          "commit": {
            "abbreviatedOid": "1cc5aac"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T05:28:52Z",
          "updatedAt": "2024-06-13T05:28:52Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "@jsalowey As above: yes when the header is defined.",
              "createdAt": "2024-06-13T05:28:52Z",
              "updatedAt": "2024-06-13T05:28:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-I8jM",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T16:23:48Z",
          "updatedAt": "2024-06-13T16:23:49Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "New issue: #15 ",
              "createdAt": "2024-06-13T16:23:48Z",
              "updatedAt": "2024-06-13T16:23:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-I-tJ",
          "commit": {
            "abbreviatedOid": "3c4ba92"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T16:28:18Z",
          "updatedAt": "2024-06-13T16:28:18Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "`keyid` comment addressed. `alg` comment now #16.",
              "createdAt": "2024-06-13T16:28:18Z",
              "updatedAt": "2024-06-13T16:28:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOLJmm785x3ZbH",
      "title": "initial mTLS section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/10",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-08T17:08:57Z",
      "updatedAt": "2024-07-03T16:50:52Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "fe384946b2661eb209c80ca47361bdcb2482b195",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "js-mtls-1",
      "headRefOid": "ceff4ee8ce0efdb206c8ae879e41505174ccddad",
      "closedAt": "2024-06-21T19:17:11Z",
      "mergedAt": "2024-06-21T19:17:11Z",
      "mergedBy": "jsalowey",
      "mergeCommit": {
        "oid": "a7372b03cde959fa1edb6e46402f5cb8448ceb60"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm7859htbf",
          "commit": {
            "abbreviatedOid": "74d9510"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-06-08T22:23:31Z",
          "updatedAt": "2024-06-08T22:38:27Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nThe WIMSE workload identity may be carried within an X.509 certificate. When the WIMSE workload identity is present in a certificate it MUST be encoded in a SubjctAltName extension of type URI.  There MUST be only one SubjectAltName extension of type URI in a WIMSE certificate.  The WIMSE certificate may contain SubjectAltName extensions of other types such as DNSName.\r\n```",
              "createdAt": "2024-06-08T22:23:32Z",
              "updatedAt": "2024-06-08T22:38:27Z"
            },
            {
              "originalPosition": 4,
              "body": "I would expect something like: the WIMSE identity [ref: identity section] MUST be encoded as the SAN. The current text is too conditional IMO.",
              "createdAt": "2024-06-08T22:25:06Z",
              "updatedAt": "2024-06-08T22:38:27Z"
            },
            {
              "originalPosition": 6,
              "body": "I think the \"must\" must be MUST.",
              "createdAt": "2024-06-08T22:26:59Z",
              "updatedAt": "2024-06-08T22:38:27Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nServers wishing to use the WIMSE identity for authorizing the client MUST require client certificate authentication in the TLS handshake. Other methods of post handshake authentication are not specified by this document. WIMSE servers MUST validate that the trust domain portion of the WIMSE certificate matches the expected trust domain for the client side of the connection.  The server may also may the WIMSE identity available to the application to use the full URI to match against ACLs and other policy constructs for authorization or use the WIMSE ID for accounting and auditing.\r\n```\r\n\r\nAlso, something is wrong in the last sentence and I don't understand it.",
              "createdAt": "2024-06-08T22:29:23Z",
              "updatedAt": "2024-06-08T22:38:27Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nWIMSE clients MUST validate that the trust domain portion of the WIMSE certificate matches the expected trust domain for the server side of the connection.  It is also RECOMMENDED that the client match the WIMSE identity in the certificate against the WIMSE identity of the workload of the intended server. In this case the trust domain portion of the URI is NOT treated as a host name as specified section 6.4 of {{!RFC9525}} but rather as a trust domain, the server identity is encoded in the path portion of the WIMSE identity in a deployment specific way.\r\n```\r\n\r\nAnd you are saying that the trust domain portion is interpreted as a trust domain. Do you mean, the host portion?",
              "createdAt": "2024-06-08T22:31:46Z",
              "updatedAt": "2024-06-08T22:38:27Z"
            },
            {
              "originalPosition": 8,
              "body": "A general comment about the section's structure: couldn't we have, instead of 2 sections that read much like client-side and server-side (but are not named in a way that would clarify it), a single section that says these are symmetric?",
              "createdAt": "2024-06-08T22:38:09Z",
              "updatedAt": "2024-06-08T22:38:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859h7qs",
          "commit": {
            "abbreviatedOid": "d14dfc9"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-09T01:04:41Z",
          "updatedAt": "2024-06-09T01:04:41Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I tried to simplify it a bit.  ",
              "createdAt": "2024-06-09T01:04:41Z",
              "updatedAt": "2024-06-09T01:04:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859h7rO",
          "commit": {
            "abbreviatedOid": "74d9510"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-09T01:05:12Z",
          "updatedAt": "2024-06-09T01:05:12Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Yup",
              "createdAt": "2024-06-09T01:05:12Z",
              "updatedAt": "2024-06-09T01:05:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm7859nQzW",
          "commit": {
            "abbreviatedOid": "d14dfc9"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This is a lot better, thanks. Here are a few editorials.",
          "createdAt": "2024-06-10T10:46:13Z",
          "updatedAt": "2024-06-10T10:51:12Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nWIMSE identities may be used to validate server and client connections.  When validating a WIMSE identity the relying party MUST validate that the CA issuer for the WIMSE identity is authorized to issue certificates for the trust domain of the WIMSE identity in the certificate. Other PKIX path validation rules apply.\r\n```",
              "createdAt": "2024-06-10T10:46:13Z",
              "updatedAt": "2024-06-10T10:51:12Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n It is RECOMMENDED that the client match the WIMSE identity in the certificate against the WIMSE identity of the workload of the intended server. In this case the host portion of the URI is NOT treated as a host name as specified in section 6.4 of {{!RFC9525}} but rather as a trust domain. The server identity is encoded in the path portion of the WIMSE identity in a deployment specific way.\r\n```",
              "createdAt": "2024-06-10T10:46:56Z",
              "updatedAt": "2024-06-10T10:51:12Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nIn some cases the WIMSE client may connect to the server using a DNS host name in which case the client MUST perform host name validation as defined in section 6.3 of RFC 9525.\r\n```",
              "createdAt": "2024-06-10T10:47:38Z",
              "updatedAt": "2024-06-10T10:51:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-h73n",
          "commit": {
            "abbreviatedOid": "c0b9e9d"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-17T12:51:12Z",
          "updatedAt": "2024-06-17T12:56:36Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "small typo\r\n```suggestion \r\nThe WIMSE workload identity may be carried within an X.509 certificate. The WIMSE workload identity MUST be encoded in a SubjectAltName extension of type URI.  There MUST be only one SubjectAltName extension of type URI in a WIMSE certificate.  The WIMSE certificate may contain SubjectAltName extensions of other types such as DNSName.\r\n```",
              "createdAt": "2024-06-17T12:51:12Z",
              "updatedAt": "2024-06-17T12:56:37Z"
            },
            {
              "originalPosition": 18,
              "body": "Do we expect the WIMSE client also to assert URI SAN or just DNS SAN in this case? ",
              "createdAt": "2024-06-17T12:54:26Z",
              "updatedAt": "2024-06-17T12:56:37Z"
            },
            {
              "originalPosition": 16,
              "body": "This also applies to the server performing client authentication, doesn't it? Or is this section more about the fact that server authentication is performed based on URI SAN and not DNS SAN?",
              "createdAt": "2024-06-17T12:56:17Z",
              "updatedAt": "2024-06-17T12:56:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-4yT-",
          "commit": {
            "abbreviatedOid": "c0b9e9d"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T17:39:01Z",
          "updatedAt": "2024-06-19T17:39:01Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I just re-read the last paragraph and it seems to me like a breaking change to many existing TLS stacks (in other words: how is it working out for SPIFFE?). We probably need a deeper discussion.",
              "createdAt": "2024-06-19T17:39:01Z",
              "updatedAt": "2024-06-19T17:39:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-6AUf",
          "commit": {
            "abbreviatedOid": "c0b9e9d"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T23:27:59Z",
          "updatedAt": "2024-06-19T23:27:59Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Yes, I struggled with this part as well.   Maybe we require both a DNS SAN and a WIMSE URI SAN?",
              "createdAt": "2024-06-19T23:27:59Z",
              "updatedAt": "2024-06-19T23:27:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-6CkG",
          "commit": {
            "abbreviatedOid": "673d89c"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T23:38:31Z",
          "updatedAt": "2024-06-19T23:38:31Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Maybe something like this?\r\n```suggestion\r\nIt is RECOMMENDED that the server certificate contain a DNS SAN that the client can use to perform standard host name validation.  The client SHOULD also extract the WMISE identity from the certificate if it is present and validate that the WIMSE trust domain matches the intended trust domain for the server.  The client MAY further use the WIMSE identity in applying authorization policy to the server.  If the client does not use the DNS SAN then the client MUST match the WIMSE identity in the certificate against the WIMSE identity of the workload of the intended server according to a locally defined policy. The host portion of the WIMSE URI is NOT treated as a host name as specified in section 6.4 of {{!RFC9525}} but rather as a trust domain. The server identity is encoded in the path portion of the WIMSE identity in a deployment specific way.\r\n```",
              "createdAt": "2024-06-19T23:38:31Z",
              "updatedAt": "2024-06-19T23:38:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-6CtR",
          "commit": {
            "abbreviatedOid": "673d89c"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T23:39:45Z",
          "updatedAt": "2024-06-19T23:39:45Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Good question, added a possible suggestion above.  ",
              "createdAt": "2024-06-19T23:39:45Z",
              "updatedAt": "2024-06-19T23:39:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_CuvK",
          "commit": {
            "abbreviatedOid": "673d89c"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T21:34:43Z",
          "updatedAt": "2024-06-20T21:34:43Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I like the new text.",
              "createdAt": "2024-06-20T21:34:43Z",
              "updatedAt": "2024-06-20T21:34:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_GQsH",
          "commit": {
            "abbreviatedOid": "b3d89b0"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-21T10:27:54Z",
          "updatedAt": "2024-06-21T10:27:54Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nIt is RECOMMENDED that the server certificate contain a DNS SAN that the client can use to perform standard host name validation {{Section 6.3 of RFC9525}}.  The client SHOULD also extract the WIMSE identity from the certificate if it is present and validate that the WIMSE trust domain matches the intended trust domain for the server.  The client MAY then further use the WIMSE identity in applying authorization policy to the server.  If the client does not use the DNS SAN then the client MUST match the WIMSE identity in the certificate against the WIMSE identity of the workload of the intended server according to a locally defined policy. The host portion of the WIMSE URI is NOT treated as a host name as specified in section 6.4 of {{!RFC9525}} but rather as a trust domain. The server identity is encoded in the path portion of the WIMSE identity in a deployment specific way.\r\n```\r\n\r\nTo fix the broken build.",
              "createdAt": "2024-06-21T10:27:54Z",
              "updatedAt": "2024-06-21T10:27:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOLJmm785x5xbP",
      "title": "initial security considerations",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/11",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-09T21:38:00Z",
      "updatedAt": "2024-07-03T16:50:13Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "fe384946b2661eb209c80ca47361bdcb2482b195",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "js-sec-cons-1",
      "headRefOid": "f3292092fe445b81265226d5af3e829aa7a816e6",
      "closedAt": "2024-07-03T15:44:30Z",
      "mergedAt": "2024-07-03T15:44:30Z",
      "mergedBy": "jsalowey",
      "mergeCommit": {
        "oid": "bcbf7e2323034fe257b6c4668a83aa47203e432a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm78598Z6e",
          "commit": {
            "abbreviatedOid": "dd117bc"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-06-12T13:13:52Z",
          "updatedAt": "2024-06-12T13:39:56Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think \"WIMSE Identity\" is clearer.",
              "createdAt": "2024-06-12T13:13:52Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 7,
              "body": "The first two sentences are confusing because the (proposed) WIMSE Identity *includes* the trust domain.",
              "createdAt": "2024-06-12T13:16:17Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 13,
              "body": "Make the first sentence conditional: the ID Token and its PoP are only used in the application-level options, and both are not used in MTLS.",
              "createdAt": "2024-06-12T13:23:09Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 19,
              "body": "Hmmm, not exactly. Sometimes there's a middlebox rather than end-to-end TLS, and then you have host name validation, but the \"host\" is the middlebox.",
              "createdAt": "2024-06-12T13:25:58Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 19,
              "body": "Also, the Message Sig section includes replay mitigations (detection of duplicate nonces). We should mention that and have a similar mechanism in the pop-esque option.",
              "createdAt": "2024-06-12T13:27:44Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nThe proof of possession MUST be time limited. A POP should only be valid over the time necessary for it to be successfully used for the purpose it is needed. This will typically be on the order of minutes.  POPs received outside their validity time MUST be rejected.\r\n```",
              "createdAt": "2024-06-12T13:29:52Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 27,
              "body": "This is true of the message, I'm not sure it is true of the POP.",
              "createdAt": "2024-06-12T13:32:03Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 31,
              "body": "A nonce is useful even when it is not \"distributed\". Even a nonce generated by the message originator can be used for limited replay protection.",
              "createdAt": "2024-06-12T13:33:57Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 47,
              "body": "```suggestion\r\nIf the WIMSE ID is used with X.509 certificates then the workload identity may be disclosed as part of the TLS handshake.  This can be partially mitigated by using TLS 1.3 to protect the client and server identities.\r\n```",
              "createdAt": "2024-06-12T13:36:28Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            },
            {
              "originalPosition": 47,
              "body": "I don't think that protection of workload identity falls under the \"privacy\" title. In the service-to-service case, user identity may exist as \"context\", and this is mentioned above. In the user-to-service case, this would typically be OAuth rather than WIMSE.",
              "createdAt": "2024-06-12T13:39:27Z",
              "updatedAt": "2024-06-12T13:39:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CEcX",
          "commit": {
            "abbreviatedOid": "bc1ae32"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T00:52:19Z",
          "updatedAt": "2024-06-13T00:52:19Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "You still need to do host name validation.  The service will know the name of the intermediary or the intermediary will be transparent.  I'm not sure there is more to explain here. \r\nI added a bit about the nonces in a later section. ",
              "createdAt": "2024-06-13T00:52:19Z",
              "updatedAt": "2024-06-19T23:20:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CFLh",
          "commit": {
            "abbreviatedOid": "bc1ae32"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T00:55:34Z",
          "updatedAt": "2024-06-13T00:55:34Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think this is probably something we should discuss.  There is a security trade-off broadening the scope of the POP.  I think we can evolve this section to discuss the trade-offs",
              "createdAt": "2024-06-13T00:55:34Z",
              "updatedAt": "2024-06-13T00:55:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-CFyw",
          "commit": {
            "abbreviatedOid": "dd117bc"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-13T00:58:55Z",
          "updatedAt": "2024-06-13T00:58:55Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "The connection I made to privacy is that it may be possible that a workload directly maps to a user in some cases.  In this case the workload identity can be used to track the behavior of a user.  To me this is a corner case, but I thought it was worth mentioning.  ",
              "createdAt": "2024-06-13T00:58:55Z",
              "updatedAt": "2024-06-13T00:58:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-p1Fe",
          "commit": {
            "abbreviatedOid": "bc1ae32"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-18T08:41:24Z",
          "updatedAt": "2024-06-18T08:41:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm785-57ws",
          "commit": {
            "abbreviatedOid": "dd117bc"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T22:56:15Z",
          "updatedAt": "2024-06-19T22:56:15Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Clarified this applies to the subcomponent of a name are only unique within a trust domain. ",
              "createdAt": "2024-06-19T22:56:15Z",
              "updatedAt": "2024-06-19T22:56:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-5_6T",
          "commit": {
            "abbreviatedOid": "dd117bc"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T23:24:15Z",
          "updatedAt": "2024-06-19T23:24:15Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "applied",
              "createdAt": "2024-06-19T23:24:15Z",
              "updatedAt": "2024-06-19T23:24:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786Ag6cZ",
          "commit": {
            "abbreviatedOid": "2ee2e46"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-07-03T10:48:41Z",
          "updatedAt": "2024-07-03T11:45:17Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThe Workload ID token (WIT) is bound to a secret cryptographic key and is always presented with a proof of possession as described in {{to-wit}}. The WIT is a general purpose token that can be presented in multiple contexts. The WIT and its PoP are only used in the application-level options, and both are not used in MTLS. The WIT MUST NOT be used as a bearer token. While this helps reduce the sensitivity of the token it is still possible that a token and its proof of possession may be captured and replayed within the PoP's lifetime. The following are some mitigations for the capture and reuse of the proof of possession (PoP):\r\n```",
              "createdAt": "2024-07-03T10:48:42Z",
              "updatedAt": "2024-07-03T11:45:17Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nThe WIMSE ID is scoped within an issuer and therefore any sub-components (path portion of ID) are only unique within a trust domain defined by the issuer. Using a WIMSE ID without taking into account the trust domain could allow one domain to issue tokens to spoof identities in another domain.  Additionally, the trust domain must be tied to an authorized issuer cryptographic trust root through some mechanism such as a JWKS or X.509 certificate chain. The association of an issuer, trust domain and a cryptographic trust root MUST be communicated securely out of band.\r\n```",
              "createdAt": "2024-07-03T10:50:38Z",
              "updatedAt": "2024-07-03T11:45:17Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n<cref>TODO: Should there be a DNS name to Trust domain mapping defined or some other discovery mechanism?</cref>\r\n```",
              "createdAt": "2024-07-03T10:51:07Z",
              "updatedAt": "2024-07-03T11:45:17Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nto {{mutual-tls}} MUST be performed. The WIT itself is not usable without a proof of possession.\r\n```",
              "createdAt": "2024-07-03T10:53:14Z",
              "updatedAt": "2024-07-03T11:45:17Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n* Binding to TLS Endpoint\r\n\r\nThe POP MAY be bound to a transport layer sender such as the client identity of a TLS session or TLS channel binding parameters. The mechanisms for binding are outside the scope of this specification.\r\n```\r\n\r\nRationale: the PoP is already \"sender bound\", in the sense that it is associated with the workload ID. Here you mean a more specific TLS level \"sender\".",
              "createdAt": "2024-07-03T10:58:24Z",
              "updatedAt": "2024-07-03T11:45:17Z"
            },
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nWITs and certificates with WIMSE identifiers are typically associated with a workload and not a specific user, however in some deployments the workload may be associated directly to a user. While these are exceptional cases a deployment should evaluate if the disclosure of WITs or certificates can be used to track a user.\r\n```",
              "createdAt": "2024-07-03T11:39:57Z",
              "updatedAt": "2024-07-03T11:45:17Z"
            },
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nThe proof of possession MUST be time limited. A PoP should only be valid over the time necessary for it to be successfully used for the purpose it is needed. This will typically be on the order of minutes.  PoPs received outside their validity time MUST be rejected.\r\n\r\n* Limiting Proof of Possession Scope\r\n\r\nIn order to reduce the risk of theft and replay the PoP should have a limited scope. For example, a PoP may be targeted for use with a specific workload and even a specific transaction to reduce the impact of a stolen PoP. In some cases a workload may wish to reuse a PoP for a period of time or have it accepted by multiple target workloads. A careful analysis is warranted to understand the impacts to the system if a PoP is disclosed allowing it to be presented by an attacker along with a captured WIT.\r\n\r\n* Binding to a Timestamp or Nonce\r\n\r\nA proof of possession should include information that can be used to uniquely identify it such as a unique timestamp or nonce.  This can be used by the receiver to perform basic replay protection against tokens it has already seen. Depending upon the design of the system it may be difficult to synchronize the replay cache across all token validators. In this case, if the PoP is not sufficiently scoped it may be usable with another workload.\r\nWhile a fresh nonce could be included in the PoP, a mechanism for distributing a fresh challenge nonce from the validator to provide single use properties of a PoP is outside the scope of this specification.\r\n```",
              "createdAt": "2024-07-03T11:42:38Z",
              "updatedAt": "2024-07-03T11:45:17Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nIn some deployments the WIMSE token and proof of possession may pass through multiple systems. The communication between the systems is over TLS, but the token and PoP are available in the clear at each intermediary.  While the intermediary cannot modify the token or the information within the PoP they can attempt to capture and replay the token or modify the data not protected by the PoP. Mitigations listed in the previous section can be used to provide some protection from middle boxes. Deployments should perform analysis on their situation to determine if it is appropriate to trust and allow traffic to pass through a middle box.\r\n```",
              "createdAt": "2024-07-03T11:43:42Z",
              "updatedAt": "2024-07-03T11:45:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 12,
      "id": "PR_kwDOLJmm785yAHpt",
      "title": "Service->Workload",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/12",
      "state": "CLOSED",
      "author": "frumioj",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I do not think we should use \"workload\" and \"service\" interchangeably. They MAY be synonymous in some deployments. But in some cases, elements of a workload will be heterogeneous and despite having the same \"identity\" (as a workload) will look quite different from an external perspective (e.g. the API).",
      "createdAt": "2024-06-10T16:29:14Z",
      "updatedAt": "2024-06-13T14:31:14Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "fe384946b2661eb209c80ca47361bdcb2482b195",
      "headRepository": "frumioj/wimse-s2s",
      "headRefName": "patch-1",
      "headRefOid": "545f572d3ef4d17ac621b18e9b40e39fa08b7e8e",
      "closedAt": "2024-06-13T14:31:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this for https://github.com/yaronf/wimse-s2s/issues/13 - if we decide to rename a new PR needs to be provided on top of the upcoming commits from the other PRs anyway.",
          "createdAt": "2024-06-13T14:31:14Z",
          "updatedAt": "2024-06-13T14:31:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm7859rLQ8",
          "commit": {
            "abbreviatedOid": "545f572"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thank you @frumioj. We discussed this very issue within the team and decided to put it on hold until after -00 is published (a.k.a., naming things is hard). But feel free to tag others and get their view.",
          "createdAt": "2024-06-10T18:11:45Z",
          "updatedAt": "2024-06-10T18:11:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOLJmm785ydjCg",
      "title": "Intro to Sec. 3 plus minor spelling issue",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/17",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-14T09:49:55Z",
      "updatedAt": "2024-06-17T21:32:55Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "5cdb022bf90b10d8ca134be05ff3faa4fa96124c",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-sec3-intro",
      "headRefOid": "1a3a5fece97f7a9832eeaf58c5c5b75058e5392f",
      "closedAt": "2024-06-17T21:32:46Z",
      "mergedAt": "2024-06-17T21:32:46Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "de43a1d88092abd8b6167c2bbca049e3e1874d8f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm785-UNWC",
          "commit": {
            "abbreviatedOid": "1a3a5fe"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-14T20:18:07Z",
          "updatedAt": "2024-06-14T20:18:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm785-h69u",
          "commit": {
            "abbreviatedOid": "1a3a5fe"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-17T12:49:31Z",
          "updatedAt": "2024-06-17T12:49:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOLJmm785zASrX",
      "title": "add my affiliation and email",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/18",
      "state": "MERGED",
      "author": "dfeldman",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-19T21:13:52Z",
      "updatedAt": "2024-06-19T21:15:44Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "de43a1d88092abd8b6167c2bbca049e3e1874d8f",
      "headRepository": "dfeldman/wimse-s2s",
      "headRefName": "main",
      "headRefOid": "c4e031d6e1553e40b68013f2a3182a2b8354e365",
      "closedAt": "2024-06-19T21:15:44Z",
      "mergedAt": "2024-06-19T21:15:44Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "062c314442db63d90c80a764d352fa1d110948ed"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm785-5rlu",
          "commit": {
            "abbreviatedOid": "c4e031d"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-19T21:15:37Z",
          "updatedAt": "2024-06-19T21:15:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOLJmm785zAXSA",
      "title": "First cut at the DPoP-Inspired Authentication section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/19",
      "state": "MERGED",
      "author": "bc-pi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "> Yaron Sheffer\r\n  [8:31 AM May 30 in slack]\r\nTo summarize the near term plan:\r\nJoe: security considerations and interaction with TLS\r\nBrian: ID Token and DPoP-inspired\r\nYaron: Message Signatures\r\n\r\nthis is the \"DPoP-inspired\" part \r\n\r\n\r\nA preview editors' copy of this PR can be seen at http://www.sheffer.org/wimse-s2s/bc-dpop-esque-pop/draft-sheffer-wimse-s2s-protocol.html ",
      "createdAt": "2024-06-19T21:35:33Z",
      "updatedAt": "2024-07-03T16:50:17Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "062c314442db63d90c80a764d352fa1d110948ed",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "bc-dpop-esque-pop",
      "headRefOid": "2f04e8e5a580c116602f1f7d0f8185b40bfc88a6",
      "closedAt": "2024-06-26T21:05:45Z",
      "mergedAt": "2024-06-26T21:05:45Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "8cc275fadeb15b416db8a5c02fee2939fcca16f6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm785-5--c",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T23:15:28Z",
          "updatedAt": "2024-06-19T23:15:29Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Can there be more than one context token hash?  would this need to be specified as an array or can you have multiple of the same claim in the jwt? ",
              "createdAt": "2024-06-19T23:15:28Z",
              "updatedAt": "2024-06-19T23:15:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785-5_PQ",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T23:17:59Z",
          "updatedAt": "2024-06-19T23:17:59Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "You might want to also include the hash of the WIT in the proof of possession.  Perhaps just having the full name is good enough, but I think you want to account for the issuer of the WIT as well in the signature. ",
              "createdAt": "2024-06-19T23:17:59Z",
              "updatedAt": "2024-06-19T23:18:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785--D00",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T11:42:22Z",
          "updatedAt": "2024-06-20T11:42:22Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "> Can there be more than one context token hash? \r\n\r\nThis is a good question that I asked myself while writing the above. But didn't have a great sense for so opted for the simple answer of just one. \r\n\r\nThe whole construct is admittedly somewhat awkward - trying to account/allow for different kinds of tokens that might show up in different places. \r\n\r\n \r\n> would this need to be specified as an array or can you have multiple of the same claim in the jwt?\r\n\r\nMultiple of the same claim in the jwt is not allowed (see https://datatracker.ietf.org/doc/html/rfc7519#section-4) so an array is how that kind of data is expressed. \r\n\r\n",
              "createdAt": "2024-06-20T11:42:22Z",
              "updatedAt": "2024-06-20T11:42:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785--Fi3",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T11:46:05Z",
          "updatedAt": "2024-06-20T11:46:05Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "But maybe a few different claims that conditionally show up would be a better approach. Like `ath` access token hash - a la https://www.rfc-editor.org/rfc/rfc9449.html#section-4.2-6.2 - and then `txth` transaction token hash and maybe an `oth` for *other* token hash... ",
              "createdAt": "2024-06-20T11:46:05Z",
              "updatedAt": "2024-06-20T11:46:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785--HiH",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T11:50:21Z",
          "updatedAt": "2024-06-20T11:50:21Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "> You might want to also include the hash of the WIT in the proof of possession. \r\n\r\nWhat purpose would that serve? Asking for a friend. \r\n\r\n> Perhaps just having the full name is good enough, but I think you want to account for the issuer of the WIT as well in the signature.\r\n\r\nI don't think I follow the thinking here...\r\n",
              "createdAt": "2024-06-20T11:50:21Z",
              "updatedAt": "2024-06-20T11:50:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_Bjjn",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T18:37:16Z",
          "updatedAt": "2024-06-20T18:37:16Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Consider exp rather than iat ",
              "createdAt": "2024-06-20T18:37:16Z",
              "updatedAt": "2024-06-20T18:37:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_BkTw",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T18:39:15Z",
          "updatedAt": "2024-06-20T18:39:15Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "action from the call was to put in an issue for further discussion and proceed without a WIT hash for now",
              "createdAt": "2024-06-20T18:39:15Z",
              "updatedAt": "2024-06-20T18:39:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_Blcd",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T18:42:18Z",
          "updatedAt": "2024-06-20T18:42:19Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Currently rethinking the construct ",
              "createdAt": "2024-06-20T18:42:18Z",
              "updatedAt": "2024-06-20T18:42:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_CeKj",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-06-20T21:01:30Z",
          "updatedAt": "2024-06-20T21:27:57Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Why isn't `aud` the WIMSE identity of the target? Wouldn't that be more consistent?",
              "createdAt": "2024-06-20T21:01:30Z",
              "updatedAt": "2024-06-20T21:27:57Z"
            },
            {
              "originalPosition": 35,
              "body": "Although we can definitely punt on it for now, I think we could choose a construct that's both simple and extensible.\r\n\r\n```json\r\n\"signed_headers\": {\r\n    \"txn-token\": \"txn token hash\",\r\n    \"x-custom-context\": \"x-custom-context hash\"\r\n}\r\n```\r\n\r\nUnfortunately we need the WPT to sign miscellaneous stuff, because we don't want a new WIT for every call. Having said that, as far as I can tell it does NOT need to sign the WIT itself.",
              "createdAt": "2024-06-20T21:08:32Z",
              "updatedAt": "2024-06-20T21:27:57Z"
            },
            {
              "originalPosition": 101,
              "body": "```suggestion\r\n* There is exactly one `Workload-Proof-Token` header field in the request.\r\n```",
              "createdAt": "2024-06-20T21:11:42Z",
              "updatedAt": "2024-06-20T21:27:57Z"
            },
            {
              "originalPosition": 107,
              "body": "Man, what's a poor implementer to do with \"an acceptable alias or normalization thereof\"?",
              "createdAt": "2024-06-20T21:14:07Z",
              "updatedAt": "2024-06-20T21:27:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_sEO0",
          "commit": {
            "abbreviatedOid": "7e0ccf7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T15:38:45Z",
          "updatedAt": "2024-06-26T15:38:45Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "Whatever they need to do to get shit to work in the case there are proxies in the middle that rewrite the path or even host. I agree that the language is less than ideal but think some allowance is needed. ",
              "createdAt": "2024-06-26T15:38:45Z",
              "updatedAt": "2024-06-26T15:38:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_sHp6",
          "commit": {
            "abbreviatedOid": "7e0ccf7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T15:44:46Z",
          "updatedAt": "2024-06-26T15:44:46Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "That, to me, begs a larger philosophical and scoping question about naming and addressing and identity, which is beyond my competence. And in that lacking of competence, I've used an existing, well-known, and widely used means of identifying the target of an HTTP request. ",
              "createdAt": "2024-06-26T15:44:46Z",
              "updatedAt": "2024-06-26T15:44:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_sJHu",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T15:47:27Z",
          "updatedAt": "2024-06-26T15:47:27Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "issue here https://github.com/yaronf/wimse-s2s/issues/24 for posterity and resolving this conversation",
              "createdAt": "2024-06-26T15:47:27Z",
              "updatedAt": "2024-06-26T15:47:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_sXXr",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T16:13:44Z",
          "updatedAt": "2024-06-26T16:13:44Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "done w/ 26dff3d954a018216c69f66dce18274ee7f56c1d ",
              "createdAt": "2024-06-26T16:13:44Z",
              "updatedAt": "2024-06-26T16:13:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_suAy",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T16:39:12Z",
          "updatedAt": "2024-06-26T16:39:12Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "Let's keep it for now and I will open an issue.",
              "createdAt": "2024-06-26T16:39:12Z",
              "updatedAt": "2024-06-26T16:39:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_swJ8",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T16:41:43Z",
          "updatedAt": "2024-06-26T16:41:44Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "WFM",
              "createdAt": "2024-06-26T16:41:43Z",
              "updatedAt": "2024-06-26T16:41:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_sxUa",
          "commit": {
            "abbreviatedOid": "26dff3d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T16:43:31Z",
          "updatedAt": "2024-06-26T16:43:31Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "#26 for the folks playing along at home ",
              "createdAt": "2024-06-26T16:43:31Z",
              "updatedAt": "2024-06-26T16:43:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_syC3",
          "commit": {
            "abbreviatedOid": "6b5173d"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T16:45:07Z",
          "updatedAt": "2024-06-26T16:45:08Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Hmmph, let's discuss offline. In the meantime, please remove the redundant \"the\" from the sentence.",
              "createdAt": "2024-06-26T16:45:08Z",
              "updatedAt": "2024-06-26T16:45:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_sylW",
          "commit": {
            "abbreviatedOid": "26dff3d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T16:46:13Z",
          "updatedAt": "2024-06-26T16:46:13Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "pizza pizza\r\n```suggestion\r\n    * `aud`: The audience of the token contains the HTTP target URI ({{Section 7.1 of RFC9110}}) of the request\r\n```",
              "createdAt": "2024-06-26T16:46:13Z",
              "updatedAt": "2024-06-26T16:46:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_s2eK",
          "commit": {
            "abbreviatedOid": "0694849"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T16:54:30Z",
          "updatedAt": "2024-06-26T16:54:31Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "done 06948498e55d9cdf8eccc34fc00c2c7c135f2cc0 and looking forward to a lively discussion ",
              "createdAt": "2024-06-26T16:54:30Z",
              "updatedAt": "2024-06-26T16:54:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_uQGG",
          "commit": {
            "abbreviatedOid": "0694849"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T20:01:34Z",
          "updatedAt": "2024-06-26T20:01:34Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "Created issue #25 from @yaronf's comment and c5b46a1d06829b5ec435f143d16d57a478003706 tries to do this in a somewhat better way. ",
              "createdAt": "2024-06-26T20:01:34Z",
              "updatedAt": "2024-06-26T20:01:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_uxft",
          "commit": {
            "abbreviatedOid": "c5b46a1"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T21:02:34Z",
          "updatedAt": "2024-06-26T21:02:34Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n     a base64url encoding (as defined in {{Section 2 of RFC7515}}) of the SHA-256 hash of\r\n```",
              "createdAt": "2024-06-26T21:02:34Z",
              "updatedAt": "2024-06-26T21:02:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_uxsu",
          "commit": {
            "abbreviatedOid": "c5b46a1"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-26T21:03:08Z",
          "updatedAt": "2024-06-26T21:03:08Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n     request. The value MUST be the result of a base64url encoding (as defined in {{Section 2 of RFC7515}}) of the\r\n```",
              "createdAt": "2024-06-26T21:03:08Z",
              "updatedAt": "2024-06-26T21:03:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_uykp",
          "commit": {
            "abbreviatedOid": "2f04e8e"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-26T21:05:33Z",
          "updatedAt": "2024-06-26T21:05:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOLJmm785zAhGh",
      "title": "Initial version of Abstract (and a reference-related nit)",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/20",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-19T22:29:10Z",
      "updatedAt": "2024-07-03T16:50:24Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "062c314442db63d90c80a764d352fa1d110948ed",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-abstract",
      "headRefOid": "f624cfae82e1ca364cc933cdb52580af03bc72f0",
      "closedAt": "2024-06-20T21:31:25Z",
      "mergedAt": "2024-06-20T21:31:25Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "7f6f907adeda8a041c5095340136721a7b8492f0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm785-5-dO",
          "commit": {
            "abbreviatedOid": "9f68f5a"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-19T23:10:54Z",
          "updatedAt": "2024-06-19T23:10:54Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "You probably still want TLS protection in both cases, you just may not be using WIMSE based client authentication in both places. \r\n\r\n```suggestion\r\nchain can have some calls use one protocol and some use the other. Service A can call\r\nService B with mutual TLS authentication, while the next call from Service B to Service C\r\nwould be authenticated at the application level.\r\n```",
              "createdAt": "2024-06-19T23:10:54Z",
              "updatedAt": "2024-06-19T23:11:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_AcQT",
          "commit": {
            "abbreviatedOid": "9f68f5a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T15:56:59Z",
          "updatedAt": "2024-06-20T15:57:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "ah, thanks. I didn't know you could do this and was wondering where \"*** warning: explicit settings completely override canned bibxml in reference IANA.JOSE.ALGS\" was coming from and how to fix it ",
              "createdAt": "2024-06-20T15:56:59Z",
              "updatedAt": "2024-06-20T15:57:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_AcW-",
          "commit": {
            "abbreviatedOid": "9f68f5a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T15:57:12Z",
          "updatedAt": "2024-06-20T15:57:12Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\none at the application level and one that makes use of trusted TLS transport.\r\n```",
              "createdAt": "2024-06-20T15:57:12Z",
              "updatedAt": "2024-06-20T15:57:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm785_AcxL",
          "commit": {
            "abbreviatedOid": "9f68f5a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-20T15:58:02Z",
          "updatedAt": "2024-06-20T15:58:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm785_AdVz",
          "commit": {
            "abbreviatedOid": "9f68f5a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-06-20T15:59:11Z",
          "updatedAt": "2024-06-20T15:59:11Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "concur w/ @jsalowey here ",
              "createdAt": "2024-06-20T15:59:11Z",
              "updatedAt": "2024-06-20T15:59:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOLJmm785zAmUG",
      "title": "Update draft-sheffer-wimse-s2s-protocol.md",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/21",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "You may still want TLS protection on both links for various reasons. I think it is the authentication that we are more concerned about in terms of both approaches.",
      "createdAt": "2024-06-19T23:04:09Z",
      "updatedAt": "2024-07-03T16:50:53Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "ys-abstract",
      "baseRefOid": "9f68f5abe33e829af90377cd9d31489e202423e2",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "jsalowey-patch-1",
      "headRefOid": "86b5b1c868b1316dc9b007af36298a9e3caf9913",
      "closedAt": "2024-06-19T23:11:58Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 27,
      "id": "PR_kwDOLJmm785zsH5B",
      "title": "Minor editorial cleanups",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/27",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-06-26T22:02:18Z",
      "updatedAt": "2024-07-03T16:50:16Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "8cc275fadeb15b416db8a5c02fee2939fcca16f6",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-msg-sig-minor",
      "headRefOid": "3dd7589b287b0bbb8786be6fcb9c7652d4b9fefc",
      "closedAt": "2024-06-26T23:11:12Z",
      "mergedAt": "2024-06-26T23:11:12Z",
      "mergedBy": "bc-pi",
      "mergeCommit": {
        "oid": "d661a8a35867ad5ea66d19818cbfd2b6dd84aa93"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm785_vVeE",
          "commit": {
            "abbreviatedOid": "3dd7589"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-06-26T23:11:05Z",
          "updatedAt": "2024-06-26T23:11:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOLJmm7850F3cx",
      "title": "Small cleanups - still need XML for CREFs",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/30",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-01T16:14:03Z",
      "updatedAt": "2024-07-03T16:50:15Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "262caeb7113333ae287c7f3609fa130d2d4fa656",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-cleanup",
      "headRefOid": "c91ffe9005cdbae7f08b7f374af935f7140f6914",
      "closedAt": "2024-07-01T20:28:03Z",
      "mergedAt": "2024-07-01T20:28:03Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "977d3639dadcf31a35e6a735f60f09827a340595"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786AROLn",
          "commit": {
            "abbreviatedOid": "c91ffe9"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-01T18:08:40Z",
          "updatedAt": "2024-07-01T18:08:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "PR_kwDOLJmm7850WdZv",
      "title": "Fold long lines",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/33",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "So we don't fail id-nits.",
      "createdAt": "2024-07-03T17:00:15Z",
      "updatedAt": "2025-01-17T20:40:28Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "ec0683d91d922b1f381d95a4eab48c99d37c047d",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-longlines",
      "headRefOid": "d363772475f120082c3996f6bf0de068213eefc9",
      "closedAt": "2024-07-03T17:48:14Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "The result is simply ugly. Closing and replacing by rfcfold.",
          "createdAt": "2024-07-03T17:48:14Z",
          "updatedAt": "2024-07-03T17:48:14Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 35,
      "id": "PR_kwDOLJmm7850WsoV",
      "title": "Use rfcfold for long lines (message sigs section)",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/35",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-03T17:44:01Z",
      "updatedAt": "2024-11-21T22:15:40Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "20e7488c18c8c2616508c0c0aa7a22a102c41e47",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-longlines2",
      "headRefOid": "61936dbc02bcd2bf90edbc4ec5a7ff1e394ba282",
      "closedAt": "2024-07-03T17:48:50Z",
      "mergedAt": "2024-07-03T17:48:50Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "e76f818322f1c6773284d2e234b84cfb227b5193"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 55,
      "id": "PR_kwDOLJmm7852YjsF",
      "title": "Change trust root to trust anchor in draft-sheffer-wimse-s2s-protocol.md",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/55",
      "state": "CLOSED",
      "author": "kenmccracken-google",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Aligns with Trust Anchor terminology as used in [rfc5280](https://datatracker.ietf.org/doc/html/rfc5280).",
      "createdAt": "2024-07-24T20:00:49Z",
      "updatedAt": "2024-08-28T23:53:46Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "0656549c2be51a4cbf864f1768944f3943988781",
      "headRepository": "kenmccracken-google/wimse-s2s",
      "headRefName": "main",
      "headRefOid": "0656549c2be51a4cbf864f1768944f3943988781",
      "closedAt": "2024-08-25T23:57:03Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "I would defer to @jsalowey here, who wrote the original text and I suspect is also more of an expert on this terminology.",
          "createdAt": "2024-07-26T21:00:22Z",
          "updatedAt": "2024-07-26T21:00:22Z"
        },
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "Trust anchor is definitely more consistent with 5280 so we should probably used it. ",
          "createdAt": "2024-08-25T22:27:53Z",
          "updatedAt": "2024-08-25T22:27:53Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems to have bitrot.  Please refer to https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/58 instead.",
          "createdAt": "2024-08-26T00:08:34Z",
          "updatedAt": "2024-08-26T00:08:34Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@kenmccracken-google Hi Ken, why did you force-push into the \"main\" branch?",
          "createdAt": "2024-08-26T19:12:02Z",
          "updatedAt": "2024-08-26T19:12:02Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "> @kenmccracken-google Hi Ken, why did you force-push into the \"main\" branch?\r\n\r\nis that what happened here? I don't see where you see that that happened?  ",
          "createdAt": "2024-08-26T19:30:16Z",
          "updatedAt": "2024-08-26T19:30:16Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi I see it on the GH UI right above here, but apparently it failed because the commit log doesn't show it.",
          "createdAt": "2024-08-26T19:35:46Z",
          "updatedAt": "2024-08-26T19:35:46Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I apologize, the force-push was an error, I probably clicked the wrong options.  AFAICT the outcome is not in the commit history.",
          "createdAt": "2024-08-28T23:53:45Z",
          "updatedAt": "2024-08-28T23:53:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786Gq313",
          "commit": {
            "abbreviatedOid": "0bc4fae"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-25T22:28:09Z",
          "updatedAt": "2024-08-25T22:28:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOLJmm7854N7aY",
      "title": "Initial WG draft, with a trivial doc history section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/56",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Changed the doc name, venue etc. (thanks @jricher ). Also added a Document History section.\r\n\r\nFixes #51.",
      "createdAt": "2024-08-13T11:01:12Z",
      "updatedAt": "2024-11-21T22:15:39Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "e76f818322f1c6773284d2e234b84cfb227b5193",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-wg-draft",
      "headRefOid": "9d41c416f96c920a3437adc29ec02c5e19802a4d",
      "closedAt": "2024-08-14T22:17:17Z",
      "mergedAt": "2024-08-14T22:17:17Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "0656549c2be51a4cbf864f1768944f3943988781"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786FZeU6",
          "commit": {
            "abbreviatedOid": "9d41c41"
          },
          "author": "jricher",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-14T12:42:15Z",
          "updatedAt": "2024-08-14T12:42:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm786FdHSD",
          "commit": {
            "abbreviatedOid": "9d41c41"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-14T19:15:28Z",
          "updatedAt": "2024-08-14T19:15:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOLJmm7855XfyH",
      "title": "Added security considerations for including WIT in signature",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/57",
      "state": "CLOSED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added security considerations for binding WIT to POP signature. Related to issue #24 ",
      "createdAt": "2024-08-25T22:36:39Z",
      "updatedAt": "2024-10-15T14:39:47Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "0656549c2be51a4cbf864f1768944f3943988781",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "wit-in-pop",
      "headRefOid": "7a57c698a45251b513e18645aa0064f09e9e54e6",
      "closedAt": "2024-10-15T14:39:46Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "IMO this text is better placed in an issue rather than a PR, because it calls for discussion between the editors (or on the mailing list). In particular the last paragraph makes it very clear.\r\n\r\nSo, I suggest to close the PR and move the text back to #24.",
          "createdAt": "2024-08-26T19:21:31Z",
          "updatedAt": "2024-08-26T19:21:31Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing: added the WIT into WPT.",
          "createdAt": "2024-10-15T14:39:46Z",
          "updatedAt": "2024-10-15T14:39:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786HNuE8",
          "commit": {
            "abbreviatedOid": "1669312"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-29T12:04:21Z",
          "updatedAt": "2024-08-29T12:04:22Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nIf the WIT itself is not bound in the proof of possession then it is possible that the WIT could be replaced by an attacker. If multiple WITs with different claims are issued for the same key this could result in the proof of possession having different meaning than what the sender intended and could give the attacker an advantage. Here are some possible mitigations.\r\n```",
              "createdAt": "2024-08-29T12:04:22Z",
              "updatedAt": "2024-08-29T12:04:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786HNy-E",
          "commit": {
            "abbreviatedOid": "1669312"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-29T12:12:02Z",
          "updatedAt": "2024-08-29T12:12:02Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I feel like a little more qualification around the prerequisites or capabilities of such an attacker is needed here. ",
              "createdAt": "2024-08-29T12:12:02Z",
              "updatedAt": "2024-08-29T12:12:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786HN1Je",
          "commit": {
            "abbreviatedOid": "1669312"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-29T12:15:35Z",
          "updatedAt": "2024-08-29T12:15:36Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "i think mabye?\r\n```suggestion\r\nIf the proof of possession covers the entire WIT in the signature then the signature will fail if the WIT is substituted and the attacker will not be able to replace the WIT.\r\n```",
              "createdAt": "2024-08-29T12:15:35Z",
              "updatedAt": "2024-08-29T12:15:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786HN2qJ",
          "commit": {
            "abbreviatedOid": "1669312"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-29T12:18:02Z",
          "updatedAt": "2024-08-29T12:18:03Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I feel like this is the easy and straight forward \"solution\" but, from prior discussions, I might be naive or in the rough on that. ",
              "createdAt": "2024-08-29T12:18:03Z",
              "updatedAt": "2024-08-29T12:18:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786HN3mp",
          "commit": {
            "abbreviatedOid": "1669312"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-29T12:19:41Z",
          "updatedAt": "2024-08-29T12:19:42Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "\"least special\" reads awkwardly to me - do you mean like \"fewest special\"? \r\n\r\nAlso I was about to ask \"isn't this the same as the prior option?\" but then I realized I think that you are talking about the prior option here rather than describing a new option. ",
              "createdAt": "2024-08-29T12:19:41Z",
              "updatedAt": "2024-08-29T12:19:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786MaLID",
          "commit": {
            "abbreviatedOid": "b9c20db"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T22:52:19Z",
          "updatedAt": "2024-10-08T22:52:19Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nThe last option to sign the WIT as part of the POP requires the fewest special verification steps. This is the approach taken by http message signatures in {{http-sig-auth}}. The DPOP mechanism should take a similar approach if it continues to be part of the proposal.\r\n```",
              "createdAt": "2024-10-08T22:52:19Z",
              "updatedAt": "2024-10-08T22:52:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786MaLyo",
          "commit": {
            "abbreviatedOid": "7a57c69"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T22:55:14Z",
          "updatedAt": "2024-10-08T22:55:14Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I think it would just be simpler to include a hash of the WIT in the signature.  If not there will always be a chance that there is a substantive different between WITs that results in a security flaw. ",
              "createdAt": "2024-10-08T22:55:14Z",
              "updatedAt": "2024-10-08T22:55:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 58,
      "id": "PR_kwDOLJmm7855XpII",
      "title": "Change trust root to trust anchor",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/58",
      "state": "MERGED",
      "author": "kenmccracken-google",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Change trust root to trust anchor, to align with Trust Anchor terminology as used in rfc5280.",
      "createdAt": "2024-08-26T00:07:51Z",
      "updatedAt": "2024-09-12T14:07:31Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "0656549c2be51a4cbf864f1768944f3943988781",
      "headRepository": "kenmccracken-google/wimse-s2s",
      "headRefName": "main",
      "headRefOid": "62bd13c7fa0ac1b52cb69d67b06326010dd30332",
      "closedAt": "2024-09-12T14:07:31Z",
      "mergedAt": "2024-09-12T14:07:31Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "3ec697b04585f85c9ab8f1dac1e970eba9594923"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786GxVJ2",
          "commit": {
            "abbreviatedOid": "62bd13c"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "sure ",
          "createdAt": "2024-08-26T16:18:02Z",
          "updatedAt": "2024-08-26T16:18:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "PR_kwDOLJmm785552Pl",
      "title": "Replace most instances of \"WIMSE identity\"",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/59",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Editorial. Closes #48.",
      "createdAt": "2024-08-30T00:05:46Z",
      "updatedAt": "2024-11-21T22:15:34Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "0656549c2be51a4cbf864f1768944f3943988781",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-wimse-identities",
      "headRefOid": "ca0d3091ca5de7d7f703cc3a3883d9e57d3f8b5a",
      "closedAt": "2024-09-04T17:43:51Z",
      "mergedAt": "2024-09-04T17:43:51Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "66781de0c48a3cb3b4868de6ef156a490cc8b5a3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786HbQRp",
          "commit": {
            "abbreviatedOid": "ca0d309"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-30T11:59:56Z",
          "updatedAt": "2024-08-30T11:59:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 60,
      "id": "PR_kwDOLJmm7857azRd",
      "title": "More flexible `signed_headers` approach",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/60",
      "state": "CLOSED",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "yaronf",
        "bc-pi"
      ],
      "labels": [],
      "body": "Introduces `signed_headers` as suggested by Yaron. \r\n\r\nThis approach removes `tth` and `oth` claims for a more flexible `signed_headers` claim which can transfer proof for any (http) header.\r\n\r\nResolves #25 #39",
      "createdAt": "2024-09-13T10:52:12Z",
      "updatedAt": "2024-10-10T14:15:55Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "3ec697b04585f85c9ab8f1dac1e970eba9594923",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "arndt-s/add_signed_headers_claim",
      "headRefOid": "c0a446a3ca1dd814dbde6a76a51301f7bd9edda0",
      "closedAt": "2024-10-10T14:15:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing after various discussions, we don't need to have parity between 4.2 and 4.3",
          "createdAt": "2024-10-10T14:15:55Z",
          "updatedAt": "2024-10-10T14:15:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786JQlwM",
          "commit": {
            "abbreviatedOid": "c0a446a"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-13T11:03:54Z",
          "updatedAt": "2024-09-13T11:03:55Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "My thinking here is, that not restricting it to HTTP allows `WPT` to be used for example with `Kafka` or `gRPC headers`.",
              "createdAt": "2024-09-13T11:03:54Z",
              "updatedAt": "2024-09-13T11:03:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786JQmFe",
          "commit": {
            "abbreviatedOid": "c0a446a"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-13T11:04:45Z",
          "updatedAt": "2024-09-13T11:04:45Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "TODO: update example WPT",
              "createdAt": "2024-09-13T11:04:45Z",
              "updatedAt": "2024-09-13T11:04:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786JQ4uV",
          "commit": {
            "abbreviatedOid": "c0a446a"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-13T11:48:21Z",
          "updatedAt": "2024-09-13T11:48:21Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Yes and no. The normative text should be focused on HTTP. If we add a note about a future non-HTTP variant of this protocol, it should be very clear that it's outside the normative \"flow\".",
              "createdAt": "2024-09-13T11:48:21Z",
              "updatedAt": "2024-09-13T11:48:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786JQ8Q1",
          "commit": {
            "abbreviatedOid": "c0a446a"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-09-13T11:56:13Z",
          "updatedAt": "2024-09-13T12:05:46Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "To the text: I don't understand the terminology. Why not say simply \"this is a header field name\" and be done with it?\r\n\r\nAlso there's the lovely thing with canonicalization of the header **name**. Quoting from RFC 9421:\r\n> The component name for an HTTP field is the lowercased form of its field name as defined in [Section 5.1](https://rfc-editor.org/rfc/rfc9110#section-5.1) of [[HTTP](https://www.rfc-editor.org/rfc/rfc9421.html#RFC9110)]. While HTTP field names are case insensitive, implementations MUST use lowercased field names (e.g., content-type, date, etag) when using them as component names.",
              "createdAt": "2024-09-13T11:56:13Z",
              "updatedAt": "2024-09-13T12:05:46Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n* If `Workload-Proof-Token` contains a `signed_headers` claim:\r\n```",
              "createdAt": "2024-09-13T11:57:43Z",
              "updatedAt": "2024-09-13T12:05:47Z"
            },
            {
              "originalPosition": 53,
              "body": "Huh? An attacker can add a header with the same name as an existing header and (depending on implementation) get it accepted.\r\n\r\nI suggest to remove this bullet and change the first one to:\r\n> The request contains exactly one header for each claim in `signed_headers` and no additional headers.",
              "createdAt": "2024-09-13T12:01:03Z",
              "updatedAt": "2024-09-13T12:05:47Z"
            },
            {
              "originalPosition": 54,
              "body": "I believe (but don't consider myself an HTTP expert) that if a header is repeated multiple times, this is equivalent to concatenating the values together. Oh, here's the text from RFC 9421 again (@bc-pi will love it, I'm sure):\r\n\r\n> Unless overridden by additional parameters and rules, HTTP field values MUST be combined into a single value as defined in [Section 5.2](https://rfc-editor.org/rfc/rfc9110#section-5.2) of [[HTTP](https://www.rfc-editor.org/rfc/rfc9421.html#RFC9110)] to create the component value. Specifically, HTTP fields sent as multiple fields MUST be combined by concatenating the values using a single comma and a single space as a separator (\",\" + \" \"). Note that intermediaries are allowed to combine values of HTTP fields with any amount of whitespace between the commas, and if this behavior is not accounted for by the verifier, the signature can fail, since the signer and verifier will see a different component value in their respective signature bases. For robustness, it is RECOMMENDED that signed messages include only a single instance of any field covered under the signature, particularly with the value for any list-based fields serialized using the algorithm below. This approach increases the chances of the field value remaining untouched through intermediaries. Where that approach is not possible and multiple instances of a field need to be sent separately, it is RECOMMENDED that signers and verifiers process any list-based fields taking all individual field values and combining them based on the strict algorithm below, to counter possible intermediary behavior.",
              "createdAt": "2024-09-13T12:04:23Z",
              "updatedAt": "2024-09-13T12:05:47Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nIt is important to keep in mind that the processing rules between `ath` and `signed_headers` differ. `ath` would only compare the hashes of the actual token whilst the `Authorization` value in the `signed_headers` claim would compare the entire header value, including for example, a `Bearer ` prefix.\r\n```",
              "createdAt": "2024-09-13T12:05:34Z",
              "updatedAt": "2024-09-13T12:05:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786Jj9BI",
          "commit": {
            "abbreviatedOid": "c0a446a"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "We probably should discuss this a bit more on our call, again, before digging into this more.",
          "createdAt": "2024-09-16T21:48:03Z",
          "updatedAt": "2024-09-16T22:15:53Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think this line changes the meaning of the requiredness of the things below in a not okay way. And Workload Proof Token shouldn't have ticks around it. ",
              "createdAt": "2024-09-16T21:48:03Z",
              "updatedAt": "2024-09-16T22:09:30Z"
            },
            {
              "originalPosition": 17,
              "body": "Not loving the name. These headers aren't really signed, they are covered by the signature by inclusion of a digest value. Also JWT's typically use shorter names. Also this shouldn't IMHO be a general signature thing that ventures into reinventing HTTP signatures. ",
              "createdAt": "2024-09-16T21:54:16Z",
              "updatedAt": "2024-09-16T22:09:31Z"
            },
            {
              "originalPosition": 18,
              "body": "I know I said I used `aud` rather than `htu` and `htm` to be less coupled to HTTP but that was just part of the rational and shouldn't be taken too far. ",
              "createdAt": "2024-09-16T21:56:46Z",
              "updatedAt": "2024-09-16T22:09:31Z"
            },
            {
              "originalPosition": 18,
              "body": "I'm not sure I know what exactly \"generic, request or entity fields\" means exactly in HTTP but I'm pretty sure it's not what should be here (especially entity). ",
              "createdAt": "2024-09-16T22:00:52Z",
              "updatedAt": "2024-09-16T22:09:31Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n* If Workload-Proof-Token contains a `signed_headers` claim:\r\n```",
              "createdAt": "2024-09-16T22:02:38Z",
              "updatedAt": "2024-09-16T22:09:31Z"
            },
            {
              "originalPosition": 53,
              "body": "I must admit to being pretty confused at this stage. ",
              "createdAt": "2024-09-16T22:06:40Z",
              "updatedAt": "2024-09-16T22:09:31Z"
            },
            {
              "originalPosition": 54,
              "body": "This solution, which shouldn't attempt to be a generic signature thing, should probably constrain itself to single value things.",
              "createdAt": "2024-09-16T22:07:37Z",
              "updatedAt": "2024-09-16T22:09:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786JV6R1",
          "commit": {
            "abbreviatedOid": "c0a446a"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-13T22:03:04Z",
          "updatedAt": "2024-09-20T00:24:19Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "We might want to say generically somewhere in the document that is an HTTP profile and that other profiles may be developed for other use cases. ",
              "createdAt": "2024-09-13T22:03:05Z",
              "updatedAt": "2024-09-20T00:24:19Z"
            },
            {
              "originalPosition": 18,
              "body": "I'm in agreement that we want to focus the POP mechanism on HTTP. Trying to anticipate some other protocol or constraints at this point is difficult. We will need to define the POP for other protocols in other documents.  I think there is value in having the POP be flexible.  I think that is an argument in favor of HTTPSigs.  \r\nJust to mention here It would be great if we keep WIT as not tightly bound to HTTP as it is now.  \r\n",
              "createdAt": "2024-09-20T00:21:58Z",
              "updatedAt": "2024-09-20T00:24:19Z"
            }
          ]
        }
      ]
    },
    {
      "number": 61,
      "id": "PR_kwDOLJmm7858Gk31",
      "title": "revise workload identity section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/61",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Revised the workload identity section to align with RFC 5280 and include trust domain.  Aligns closely with SPIFFE, but allows other schemes to be defined.  ",
      "createdAt": "2024-09-20T00:12:02Z",
      "updatedAt": "2024-11-21T22:15:57Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "ff36cc24608a299bb8e0f8587af4371634166026",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "identifier-revision",
      "headRefOid": "b0c189fb34a4a57c543ef4bb6f93c47b89a65ea1",
      "closedAt": "2024-10-12T23:27:11Z",
      "mergedAt": "2024-10-12T23:27:11Z",
      "mergedBy": "jsalowey",
      "mergeCommit": {
        "oid": "8b8bcf2a6d77bcd7f6f003949c6433cf1a2058bd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786KKMX9",
          "commit": {
            "abbreviatedOid": "b51e214"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-09-20T10:55:04Z",
          "updatedAt": "2024-09-20T10:57:15Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Hmmm, and the following sentence that you're not citing allows for the use of IP addresses. Should we say that IP addresses MUST NOT be used?",
              "createdAt": "2024-09-20T10:55:04Z",
              "updatedAt": "2024-09-20T10:57:15Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nIn addition the URI MUST include an authority that identifies the trust domain within which the identifier is scoped. The trust domain SHOULD be a fully qualified domain name belonging to the organization defining the trust domain to help provide uniqueness for the trust domain identifier. The scheme and scheme specific part are not defined by this specification. An example of an identifier format that conforms to this definition is [SPIFFE ID](https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE-ID.md).\r\n```",
              "createdAt": "2024-09-20T10:56:43Z",
              "updatedAt": "2024-09-20T10:57:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786MaI3G",
          "commit": {
            "abbreviatedOid": "b51e214"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-08T22:42:32Z",
          "updatedAt": "2024-10-08T22:42:32Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "So The spiffe trust domain allows for ipv4, but not ipv6 addresses. https://github.com/spiffe/spiffe/blob/main/standards/SPIFFE-ID.md#21-trust-domain\r\n\r\nMaybe add a statement such as \"While the URI encoding rules allow host names to be specified as IP addresses, IP addresses MUT NOT be used to represent trust domains except in the case where they are needed for compatibility with existing naming schemes.\"",
              "createdAt": "2024-10-08T22:42:32Z",
              "updatedAt": "2024-10-08T22:42:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786MkFys",
          "commit": {
            "abbreviatedOid": "685818a"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T20:42:29Z",
          "updatedAt": "2024-10-09T20:42:30Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nWhile the URI encoding rules allow host names to be specified as IP addresses, IP addresses MUT NOT be used to represent trust domains except in the case where they are needed for compatibility with existing naming schemes.\r\n```",
              "createdAt": "2024-10-09T20:42:30Z",
              "updatedAt": "2024-10-09T20:42:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786M8Vms",
          "commit": {
            "abbreviatedOid": "b51e214"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-12T22:15:13Z",
          "updatedAt": "2024-10-12T22:15:13Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Added ",
              "createdAt": "2024-10-12T22:15:13Z",
              "updatedAt": "2024-10-12T22:15:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786M8vP5",
          "commit": {
            "abbreviatedOid": "b51e214"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-12T23:26:58Z",
          "updatedAt": "2024-10-12T23:26:58Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Added,",
              "createdAt": "2024-10-12T23:26:58Z",
              "updatedAt": "2024-10-12T23:26:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 62,
      "id": "PR_kwDOLJmm7858GtDo",
      "title": "Add section on trust domain",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/62",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-20T00:51:40Z",
      "updatedAt": "2024-11-21T22:16:00Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "3ec697b04585f85c9ab8f1dac1e970eba9594923",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "trust-domain",
      "headRefOid": "2d189c6ad131cfa51ced87194c8df2256dc5705a",
      "closedAt": "2024-10-12T21:53:29Z",
      "mergedAt": "2024-10-12T21:53:29Z",
      "mergedBy": "jsalowey",
      "mergeCommit": {
        "oid": "ff36cc24608a299bb8e0f8587af4371634166026"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786KKQIu",
          "commit": {
            "abbreviatedOid": "1dd707f"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-09-20T11:03:41Z",
          "updatedAt": "2024-09-20T11:04:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nA trust domain is the authority that issues WIMSE certificates and tokens. Trust domains SHOULD be identified by a fully qualified domain name belonging to the organization defining the trust domain.\r\nA trust domain maps to one or more trust anchors for validating X.509 certificates and a mechanism to securely obtain a JWK Set {{!RFC7517}} for validating WIMSE WIT tokens. This mapping MUST be obtained through a secure mechanism that ensures the authenticity and integrity of the mapping is fresh and not compromised. This secure mechanism is out of scope for this document.\r\n```",
              "createdAt": "2024-09-20T11:03:41Z",
              "updatedAt": "2024-09-20T11:05:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786MspwG",
          "commit": {
            "abbreviatedOid": "114ba55"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-10T14:14:05Z",
          "updatedAt": "2024-10-10T14:14:06Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@joe-venafi As discussed, please modify the first sentence.",
              "createdAt": "2024-10-10T14:14:05Z",
              "updatedAt": "2024-10-10T14:14:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786Musdz",
          "commit": {
            "abbreviatedOid": "114ba55"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-10T17:54:15Z",
          "updatedAt": "2024-10-10T17:54:15Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "@jsalowey Quoting Gemini:\r\n\r\n> In the context of computer security, a trust domain is a logical grouping of computers and users that share a common set of security policies and authentication mechanisms. This mutual trust allows users in one domain to access resources in another domain within the same trust relationship, streamlining access while maintaining security control.",
              "createdAt": "2024-10-10T17:54:15Z",
              "updatedAt": "2024-10-10T17:54:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786M8MSD",
          "commit": {
            "abbreviatedOid": "114ba55"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-12T21:52:42Z",
          "updatedAt": "2024-10-12T21:52:42Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Thanks, paraphrased to \"A trust domain is a logical grouping of systems that share a common set of security controls and policies.\"",
              "createdAt": "2024-10-12T21:52:42Z",
              "updatedAt": "2024-10-12T21:52:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 63,
      "id": "PR_kwDOLJmm785-BXz-",
      "title": "rework of the tls section",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/63",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Reworked the TLS section a little.  mostly addresses issue #46 ",
      "createdAt": "2024-10-09T04:11:08Z",
      "updatedAt": "2024-11-21T22:15:58Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "3ec697b04585f85c9ab8f1dac1e970eba9594923",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "mutual-tls",
      "headRefOid": "280248c00f014344356379997ea3aa393938d914",
      "closedAt": "2024-10-12T21:51:02Z",
      "mergedAt": "2024-10-12T21:51:02Z",
      "mergedBy": "jsalowey",
      "mergeCommit": {
        "oid": "aa582a78a3cd125a42bc5144224b6ee00e8b48eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786MiQ06",
          "commit": {
            "abbreviatedOid": "6c1bb3d"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T17:36:48Z",
          "updatedAt": "2024-10-09T17:38:36Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Asking out of ignorance: in the past, EKU was hit-and-miss. Is it now implemented so widely that we can have it as a MUST?",
              "createdAt": "2024-10-09T17:36:48Z",
              "updatedAt": "2024-10-09T17:38:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786MkDyO",
          "commit": {
            "abbreviatedOid": "6c1bb3d"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-09T20:37:35Z",
          "updatedAt": "2024-10-09T20:37:35Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I think its probably still a little hit and miss.  I think we can try to raise the bar here, but maybe its not really all that important enough to make it a barrier. I'd be happy with a SHOULD. ",
              "createdAt": "2024-10-09T20:37:35Z",
              "updatedAt": "2024-10-09T20:37:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786MuoYp",
          "commit": {
            "abbreviatedOid": "6c1bb3d"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Mostly editorial changes, but also MUST->SHOULD",
          "createdAt": "2024-10-10T17:45:35Z",
          "updatedAt": "2024-10-10T17:50:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nThe WIMSE workload identity may be carried within an X.509 certificate. The WIMSE workload identity MUST be encoded in a SubjectAltName extension of type URI.  There MUST be only one SubjectAltName extension of type URI in a WIMSE certificate.  If the workload will act as a TLS server for clients that do not understand WIMSE workload identities it is RECOMMENDED that WIMSE certificate contain a SubjectAltName of type DNSName with the appropriate DNS names for the server. The certificate may contain SubjectAltName extensions of other types.\r\n```",
              "createdAt": "2024-10-10T17:45:35Z",
              "updatedAt": "2024-10-10T17:50:38Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nWIMSE server certificates SHOULD have the id-kp-serverAuth extended key usage {{!RFC5280}} field set and WIMSE client certificates SHOULD have the id-kp-clientAuth extended key usage field set. A certificate that is used for both client and server connections may have both fields set. This specification does not make any other requirements beyond {{!RFC5280}} on the contents of WIMSE certificates or on the certification authorities that issue WIMSE certificates.\r\n```",
              "createdAt": "2024-10-10T17:47:35Z",
              "updatedAt": "2024-10-10T17:50:38Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nIf the WIMSE client uses a hostname to connect to the server and the server certificate contain a DNS SAN the client MUST perform standard host name validation ({{Section 6.3 of RFC9525}}) unless it is configured with the information necessary to validate the peer's WIMSE identity. If the client did not perform standard host name validation then the WIMSE client SHOULD further use the WIMSE workload identifier to validate the server.  The host portion of the WIMSE URI is NOT treated as a host name as specified in section 6.4 of {{!RFC9525}} but rather as a trust domain. The server identity is encoded in the path portion of the WIMSE workload identifier in a deployment specific way. Validating the WIMSE workload identity could be a simple match on the trust domain and path portions of the identifier or validation may be based on the specific details on how the identifier is constructed. The path portion of the WIMSE identifier MUST always be considered in the scope of the trust domain.\r\n```",
              "createdAt": "2024-10-10T17:49:10Z",
              "updatedAt": "2024-10-10T17:50:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786M8K9V",
          "commit": {
            "abbreviatedOid": "6c1bb3d"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-12T21:49:34Z",
          "updatedAt": "2024-10-12T21:49:34Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Resolved by Yaron's suggestion.",
              "createdAt": "2024-10-12T21:49:34Z",
              "updatedAt": "2024-10-12T21:49:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 64,
      "id": "PR_kwDOLJmm785-QOH0",
      "title": "Comparison of 4.2 and 4.3",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/64",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-10T17:41:54Z",
      "updatedAt": "2024-11-21T22:15:31Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "3ec697b04585f85c9ab8f1dac1e970eba9594923",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-comparison",
      "headRefOid": "1003e6e8ddc39ba10e27fc433c631fccd0266413",
      "closedAt": "2024-10-15T17:39:01Z",
      "mergedAt": "2024-10-15T17:39:01Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "e803ea1722ceb933957f124703681e15e2cab983"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "sorry about the trailing spaces ... ",
          "createdAt": "2024-10-15T17:36:11Z",
          "updatedAt": "2024-10-15T17:36:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786M1OSw",
          "commit": {
            "abbreviatedOid": "4e465ed"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Some editorial things, content-wise I'm happy.",
          "createdAt": "2024-10-11T13:03:33Z",
          "updatedAt": "2024-10-11T13:05:45Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "`Web Interaction Token` -> `Workload Identity Token`",
              "createdAt": "2024-10-11T13:03:33Z",
              "updatedAt": "2024-10-11T13:05:45Z"
            },
            {
              "originalPosition": 23,
              "body": "Some of the indentation and line breaks are off. I believe it is best to align this.",
              "createdAt": "2024-10-11T13:05:16Z",
              "updatedAt": "2024-10-11T13:05:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786M8vm5",
          "commit": {
            "abbreviatedOid": "701797c"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-12T23:46:53Z",
          "updatedAt": "2024-10-12T23:46:54Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\n- In general, Message Signatures provide greater flexibility compared to\r\nthe DPoP-inspired approach. The draft (and subsequent implementations) can decide\r\nwhether specific aspects of message signing, such as coverage of particular fields,\r\nshould be mandatory or optional. Covering more fields will constrain the proof\r\nso it cannot be easily reused in another context, which is often a security improvement. The DPoP inspired approach could\r\nbe designed to include extensibility to sign other fields, but this makes it closer to\r\ntrying to reinvent message signatures.\r\n```",
              "createdAt": "2024-10-12T23:46:54Z",
              "updatedAt": "2024-10-12T23:49:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786M8vqV",
          "commit": {
            "abbreviatedOid": "701797c"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-12T23:51:15Z",
          "updatedAt": "2024-10-12T23:51:16Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "added a bit about potential positive security impact of signing more fields, and that the the DPoP approach could be adapted to that at the cost of higher complexity. ",
              "createdAt": "2024-10-12T23:51:15Z",
              "updatedAt": "2024-10-12T23:51:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786M9kRq",
          "commit": {
            "abbreviatedOid": "8c8811c"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-13T16:11:26Z",
          "updatedAt": "2024-10-13T16:11:27Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\nbe designed to include extensibility to sign other fields, but this would make it closer to\r\ntrying to reinvent Message Signatures.\r\n```",
              "createdAt": "2024-10-13T16:11:26Z",
              "updatedAt": "2024-10-13T16:11:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NQ3vk",
          "commit": {
            "abbreviatedOid": "29f475b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T16:49:13Z",
          "updatedAt": "2024-10-15T16:49:13Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "I'd argue that this bullet overstates things a bit. Or more than a bit. This suggestion attempts to tone it down just a little. \r\n```suggestion\r\n- Message Signatures, on the other hand, benefit from an existing HTTP specific RFC with\r\nsome established implementations. This existing groundwork means that this option could\r\nbe simpler to deploy, to the extent such implementations are available and easily integrated.  \r\n```",
              "createdAt": "2024-10-15T16:49:13Z",
              "updatedAt": "2024-10-15T16:49:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NQ6hl",
          "commit": {
            "abbreviatedOid": "29f475b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T16:53:01Z",
          "updatedAt": "2024-10-15T16:53:02Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "try and be clear that it's less complex and technology-intensive because WIT is already a JWT so the WPT being a JWT isn't a big leap \r\n```suggestion\r\n- Given that the WIT (Workload Identity Token) is a type of JWT, the\r\nDPoP-inspired approach that also uses JWT is less complex and technology-intensive than Message\r\nSignatures. In contrast, Message Signatures introduce additional layers of\r\ntechnology, potentially increasing the complexity of the overall system.\r\n```",
              "createdAt": "2024-10-15T16:53:01Z",
              "updatedAt": "2024-10-15T16:53:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NQ7FP",
          "commit": {
            "abbreviatedOid": "29f475b"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "couple minor (hopefully) suggestions but overall looks good ",
          "createdAt": "2024-10-15T16:53:44Z",
          "updatedAt": "2024-10-15T16:53:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm786NRQtd",
          "commit": {
            "abbreviatedOid": "29f475b"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T17:31:53Z",
          "updatedAt": "2024-10-15T17:31:53Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "Sorry, I let ChatGPT do its thing. Facepalm.",
              "createdAt": "2024-10-15T17:31:53Z",
              "updatedAt": "2024-10-15T17:31:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NRSQC",
          "commit": {
            "abbreviatedOid": "caec8b3"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T17:34:50Z",
          "updatedAt": "2024-10-15T17:34:50Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nbe simpler to deploy, to the extent such implementations are available and easily integrated.\r\n```",
              "createdAt": "2024-10-15T17:34:50Z",
              "updatedAt": "2024-10-15T17:34:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NRTPz",
          "commit": {
            "abbreviatedOid": "1003e6e"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T17:36:33Z",
          "updatedAt": "2024-10-15T17:36:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 65,
      "id": "PR_kwDOLJmm785-V7ZP",
      "title": "Update affiliation of Arndt",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/65",
      "state": "MERGED",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updating my affiliation",
      "createdAt": "2024-10-11T13:14:22Z",
      "updatedAt": "2024-11-21T22:16:06Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "3ec697b04585f85c9ab8f1dac1e970eba9594923",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "arndt/change_org",
      "headRefOid": "02cf0aa3aeb5a856a6476808cd4ef01918e21f83",
      "closedAt": "2024-10-12T11:57:24Z",
      "mergedAt": "2024-10-12T11:57:23Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "ac825edced3286b5f7e90b18b268047933ec0fc5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786M5kGt",
          "commit": {
            "abbreviatedOid": "02cf0aa"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-12T11:57:11Z",
          "updatedAt": "2024-10-12T11:57:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 66,
      "id": "PR_kwDOLJmm785-WpNl",
      "title": "Add 'wth' claim to WPT",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/66",
      "state": "MERGED",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Adds 'wth' claim to WPT to bind WPT to WITs.",
      "createdAt": "2024-10-11T14:57:58Z",
      "updatedAt": "2024-10-15T15:38:49Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "3ec697b04585f85c9ab8f1dac1e970eba9594923",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "arndt/add_wit_binding",
      "headRefOid": "5a6969d1f23d492adfcfb530a5bb97eb1e14876f",
      "closedAt": "2024-10-14T10:49:51Z",
      "mergedAt": "2024-10-14T10:49:51Z",
      "mergedBy": "arndt-s",
      "mergeCommit": {
        "oid": "a0f30ad429cf2d6d73da694ae89bea2d1310b5f1"
      },
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "@arndt-s please also update the relevant IANA section so we don't forget.",
          "createdAt": "2024-10-13T15:58:42Z",
          "updatedAt": "2024-10-13T15:58:42Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I realize I missed a meeting but why did we add this? ",
          "createdAt": "2024-10-14T14:42:38Z",
          "updatedAt": "2024-10-14T14:42:38Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "What's the threat? Different WITs with the same cnf key and a compromised middle thing? ",
          "createdAt": "2024-10-14T14:44:42Z",
          "updatedAt": "2024-10-14T14:44:42Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "I just don't see it...",
          "createdAt": "2024-10-14T14:45:14Z",
          "updatedAt": "2024-10-14T14:45:14Z"
        },
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "Iss in the WPT is even less useful with this too. ",
          "createdAt": "2024-10-14T14:46:33Z",
          "updatedAt": "2024-10-14T14:46:33Z"
        },
        {
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "body": "> What's the threat? Different WITs with the same cnf key and a compromised middle thing?\r\n\r\nYes, currently we don't have strong binding between WPT and WIT. Only the fact that `WIT sub == WIT iss`.\r\n\r\n> Iss in the WPT is even less useful with this too.\r\n\r\nI don't understand the \"even less\" part but I see that this is somewhat duplicated now.",
          "createdAt": "2024-10-14T15:44:29Z",
          "updatedAt": "2024-10-14T15:44:29Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yes, currently we don't have strong binding between WPT and WIT. Only the fact that WIT sub == WIT iss.\r\n\r\nShould be: WIT sub == WPT iss.\r\n\r\nAnd just to state it explicitly: people are likely to extend the WIT with various \"junk\" (i.e., policy) and that wouldn't be covered otherwise.",
          "createdAt": "2024-10-14T16:46:48Z",
          "updatedAt": "2024-10-14T16:46:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786M5kRX",
          "commit": {
            "abbreviatedOid": "a2d7365"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Editorial",
          "createdAt": "2024-10-12T12:03:05Z",
          "updatedAt": "2024-10-12T12:05:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n    * `wth`: Hash of the Workload Identity Token, defined in {{to-wit}}. The value is the base64url encoding of the SHA-256\r\n     hash of the ASCII encoding of the token's value.\r\n```\r\n\r\nThe token is defined in {{to-wit}}, not the hash.",
              "createdAt": "2024-10-12T12:03:06Z",
              "updatedAt": "2024-10-12T12:05:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786M8vdn",
          "commit": {
            "abbreviatedOid": "a2d7365"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-12T23:39:24Z",
          "updatedAt": "2024-10-12T23:39:24Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Yaron's suggestion looks good to me.  ",
              "createdAt": "2024-10-12T23:39:24Z",
              "updatedAt": "2024-10-12T23:39:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NCZu_",
          "commit": {
            "abbreviatedOid": "5a6969d"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-14T10:48:29Z",
          "updatedAt": "2024-10-14T10:48:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm786NE1Tn",
          "commit": {
            "abbreviatedOid": "5a6969d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-14T14:40:28Z",
          "updatedAt": "2024-10-14T14:40:29Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "Whhhhhhyyyyyyyy?  Hex in jti values is so aesthetically displeasing.",
              "createdAt": "2024-10-14T14:40:28Z",
              "updatedAt": "2024-10-14T14:40:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NFhUJ",
          "commit": {
            "abbreviatedOid": "5a6969d"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-14T15:41:13Z",
          "updatedAt": "2024-10-14T15:41:13Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "If you feel strongly about this I can provide a new PR that changes this identifier ;)",
              "createdAt": "2024-10-14T15:41:13Z",
              "updatedAt": "2024-10-14T15:41:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NQKXS",
          "commit": {
            "abbreviatedOid": "5a6969d"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T15:38:49Z",
          "updatedAt": "2024-10-15T15:38:49Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "I do kinda. `__bwc4ESC3acc2LTC1-_x` was okay. and the order of the claims was more readable before ",
              "createdAt": "2024-10-15T15:38:49Z",
              "updatedAt": "2024-10-15T15:38:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 67,
      "id": "PR_kwDOLJmm785-c77U",
      "title": "Change log for draft -01",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/67",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-13T16:02:31Z",
      "updatedAt": "2024-11-21T22:15:33Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "8b4df6436fc3658c454a0aac8f5e2ac7a9af655b",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-changelog-01",
      "headRefOid": "97319c8aa12393224f6ee6ab653baeb62e5caa36",
      "closedAt": "2024-10-15T17:40:26Z",
      "mergedAt": "2024-10-15T17:40:25Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "0b156a21088308269f6299c494cf1237f320ff79"
      },
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "We should do these entries in conjunction with the changes...",
          "createdAt": "2024-10-14T14:57:46Z",
          "updatedAt": "2024-10-14T14:57:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786NPQUz",
          "commit": {
            "abbreviatedOid": "97319c8"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T14:39:15Z",
          "updatedAt": "2024-10-15T14:39:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm786NRW03",
          "commit": {
            "abbreviatedOid": "97319c8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T17:41:31Z",
          "updatedAt": "2024-10-15T17:41:31Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n* Addressed multiple comments from Pieter, co-chair of the WIMSE WG but comments made as an individual.\r\n```",
              "createdAt": "2024-10-15T17:41:31Z",
              "updatedAt": "2024-10-15T17:41:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NRYW-",
          "commit": {
            "abbreviatedOid": "97319c8"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T17:43:21Z",
          "updatedAt": "2024-10-15T17:43:21Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I already merged the PR, will add this text separately.",
              "createdAt": "2024-10-15T17:43:21Z",
              "updatedAt": "2024-10-15T17:43:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NRYzO",
          "commit": {
            "abbreviatedOid": "97319c8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T17:44:21Z",
          "updatedAt": "2024-10-15T17:44:21Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "race condition",
              "createdAt": "2024-10-15T17:44:21Z",
              "updatedAt": "2024-10-15T17:44:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786NRY5z",
          "commit": {
            "abbreviatedOid": "97319c8"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-15T17:44:34Z",
          "updatedAt": "2024-10-15T17:44:34Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "it's ok without too ",
              "createdAt": "2024-10-15T17:44:34Z",
              "updatedAt": "2024-10-15T17:44:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 71,
      "id": "PR_kwDOLJmm785-ysRF",
      "title": "Editorial fixes before publishing -01",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/71",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-16T08:42:41Z",
      "updatedAt": "2024-11-21T22:15:29Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "0b156a21088308269f6299c494cf1237f320ff79",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-editorial-01",
      "headRefOid": "812aad7d0add617ad8bd442f7285cde8a6cf1ca6",
      "closedAt": "2024-10-18T12:09:55Z",
      "mergedAt": "2024-10-18T12:09:55Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "a35882e6545c2f34c1dc93acdd26521d58b82774"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786NYt9i",
          "commit": {
            "abbreviatedOid": "812aad7"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-16T11:03:04Z",
          "updatedAt": "2024-10-16T11:03:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOLJmm786BOXw9",
      "title": "Add Option 3 WIT with Authentication Based on the Transport-layer",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/76",
      "state": "OPEN",
      "author": "kenmccracken-google",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In this approach, the WIT refers to the mTLS X.509 Certificate credential for establishing Workload Authentication.\r\nResolves #75",
      "createdAt": "2024-11-07T18:15:44Z",
      "updatedAt": "2024-11-26T21:09:32Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "ba2577a228ab66ef2bb4dd7ffba24e511bb5295c",
      "headRepository": "kenmccracken-google/wimse-s2s",
      "headRefName": "mtls-workload-proof",
      "headRefOid": "1ac0f0f64ef6505dc2e5073ce36efa0eb1be623e",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "body": "My perception here is that this additional option and/or the rational behind it isn't well understood by the WG or the editors/authors of this document. Nor does there seem to be much interest in perusing it. I understand that doing a PR was suggested to help facilitate discussion. But I would humbly suggest that a PR that adds oneself as an author and breaks the document build process is not a great way to solicit engagement. ",
          "createdAt": "2024-11-21T20:13:34Z",
          "updatedAt": "2024-11-21T20:13:34Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Brian, Thanks for your feedback.  I apologize for the build failures.  I'll try to get them fixed.\r\n\r\nI tried the build from a couple of different machines but it doesn't seem to work for me, including just building a fresh clone of https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol.git .  I'll see if I can figure out the problem, as of now I consistently get a failure from a package called `kramdown-rfc`, which I am not familiar with.  I've attached one of the outputs from a Mac, but I got a similar failure with the same module from a Debian linux machine.  I tried following https://github.com/martinthomson/i-d-template/blob/main/doc/SETUP.md.\r\n\r\n[failures.txt](https://github.com/user-attachments/files/17894252/failures.txt)",
          "createdAt": "2024-11-24T17:41:53Z",
          "updatedAt": "2024-11-24T17:41:53Z"
        },
        {
          "author": "jricher",
          "authorAssociation": "COLLABORATOR",
          "body": "@bc-pi @kenmccracken-google The build process is broken due to the linter picking up trailing spaces on two lines (see below). I ran `make fix-lint` and was able to build the PR locally, if this is to be included this would need to be fixed before merge:\r\n\r\n``` diff\r\n[jricher@Boudica ~/Projects/draft-ietf-wimse-s2s-protocol (mtls-workload-proof*) ]$ git diff\r\ndiff --git a/draft-ietf-wimse-s2s-protocol.md b/draft-ietf-wimse-s2s-protocol.md\r\nindex a2df4e1..0824754 100644\r\n--- a/draft-ietf-wimse-s2s-protocol.md\r\n+++ b/draft-ietf-wimse-s2s-protocol.md\r\n@@ -176,13 +176,13 @@ While the URI encoding rules allow host names to be specified as IP addresses, I\r\n \r\n As noted in the Introduction, for many deployments communication between workloads cannot use\r\n end-to-end TLS. For these deployment styles, this document proposes application-level protections.\r\n-For deployments using end-to-end TLS, application-level credentials may be used to enrich the \r\n+For deployments using end-to-end TLS, application-level credentials may be used to enrich the\r\n application security context.\r\n \r\n The current version of the document includes three alternatives, all using the newly introduced\r\n Workload Identity Token ({{to-wit}}). The first alternative ({{dpop-esque-auth}}) is inspired by the OAuth DPoP specification.\r\n The second alternative ({{http-sig-auth}}) is based on the HTTP Message Signatures RFC. The third\r\n-alternative ({{transport-layer-pop}}) is based on the TLS 1.3 and Token Binding RFCs. \r\n+alternative ({{transport-layer-pop}}) is based on the TLS 1.3 and Token Binding RFCs.\r\n We present the alternatives and expect\r\n the working group to select those that should progress towards IETF consensus.\r\n A comparison of the first two alternatives is attempted in {{app-level-comparison}}.\r\n```\r\n",
          "createdAt": "2024-11-25T13:50:58Z",
          "updatedAt": "2024-11-25T13:50:58Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "And now back to the matter at hand. Following Ken's post to the mailing list I think I understand the motivation somewhat better, but I still don't think this is a good idea.\r\n\r\nThe WIT is not an access token. It's a signed token that incorporates workload-specific information (mainly the workload's ID and its public key, but potentially future extensions) and therefore it should normally only be shared between a workload and its immediate neighbors (its successors on the call chain). As such, there are two options:\r\n- The next hop is protected with MTLS (implicitly, there is no middlebox to break TLS security): no need for WIT because the identity information and public key are provided in the certificate.\r\n- The next hop is not protected with MTLS but rather with server-authenticated TLS (and potentially a middlebox): we send the WIT over the network hop, and bind it to a signature or proof-of-possession.\r\n\r\nSo I don't see a reason to combine the WIT with MTLS.\r\n\r\nBy the way, the WIT is \"authenticated\" - it is signed by a trusted party, the server that issued it.",
          "createdAt": "2024-11-26T15:15:48Z",
          "updatedAt": "2024-11-26T15:15:48Z"
        },
        {
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it's important to allow for an architecture for Service to Service Authentication that utilizes mTLS streams established using X.509 Certificate credentials.\r\n\r\n| The WIT is not an access token. It's a signed token that incorporates workload-specific information (mainly the workload's ID and its public key, but potentially future extensions) and therefore it should normally only be shared between a workload and its immediate neighbors (its successors on the call chain). \r\n\r\nI understood the WIT to be a Workload Identity Token.  I agree it should contain the identity of the workload, represented by a URI, in the \"sub\" claim.  When it comes to proof-of-possession semantics under [RFC 7800, Section 3.1](https://datatracker.ietf.org/doc/html/rfc7800#section-3.1), I think the \"cnf\" claim should be used to identify the proof-of-possession key.  \r\n\r\nIn this context, I think that referencing an X.509 Certificate (that contains the Workload's public key) using \"x5t#S256\" should be an option for \"cnf\", as an alternative to inlining the public key in the \"jwk\" member.\r\n\r\n| As such, there are two options:\r\n| \r\n| The next hop is protected with MTLS (implicitly, there is no middlebox to break TLS security): no need for WIT because the identity information and public key are provided in the certificate.\r\n| The next hop is not protected with MTLS but rather with server-authenticated TLS (and potentially a middlebox): we send the WIT over the network hop, and bind it to a signature or proof-of-possession.\r\n\r\nI think from this description you would classify a proxy as a middlebox.  I think the middlebox proxy may be capable of hop-to-hop mTLS.  In this case, we would have the additional option:\r\n\r\n* next hop is protected with mTLS, and is a middlebox.  The middlebox is a proxy that forwards requests to destination workloads over mTLS.\r\n\r\nIn this architecture, the middlebox must perform proof-of-possession verification of the Workload's private key.  The `Workload-Identity-Token` header can be forwarded intact to the destination Workload.  The destination Workload verifies the identity of the middlebox over mTLS.   \r\n\r\n| By the way, the WIT is \"authenticated\" - it is signed by a trusted party, the server that issued it.\r\n\r\nAgree, I think I wasn't clear in my wording.  You're correct, the WIT is signed by the issuer.  I probably should have said something like:\r\n\r\nI think the Identity Server should issue WITs with a confirmation claim indicating the Workload's public key.  I think recipients of the WIT should require proof-of-possession of the Workload's private key, according to the information in the \"cnf\" claim.  I think the document should support verifying the proof-of-possession of the Workload's private key via one of \r\n1. WPT, as described in [1] Section 4.2.\r\n2. HTTP Message signatures, as described in [1] Section 4.3.\r\n3. mTLS, as described in [3].\r\n\r\nWhen the Identity Server puts an \"x5t#S256\" value in the \"cnf\" claim, the proof-of-posession verification method follows the semantics of [RFC 8705, Section 3.1](https://datatracker.ietf.org/doc/html/rfc8705#name-jwt-certificate-thumbprint-).\r\n\r\n[1] https://datatracker.ietf.org/doc/draft-ietf-wimse-s2s-protocol/01/\r\n[2] https://datatracker.ietf.org/meeting/121/materials/minutes-121-wimse-01\r\n[3] https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/76 \r\n",
          "createdAt": "2024-11-26T17:13:18Z",
          "updatedAt": "2024-11-26T21:09:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786SiYeZ",
          "commit": {
            "abbreviatedOid": "6421128"
          },
          "author": "jricher",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-25T13:47:02Z",
          "updatedAt": "2024-11-25T13:47:02Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "IETF Process note - documents should only have at most 5 authors. Other contributors can be listed in the acknowledgements section. It should be fine to add more for now but this will need to be trimmed back prior to ultimate publication.",
              "createdAt": "2024-11-25T13:47:02Z",
              "updatedAt": "2024-11-25T13:47:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786SmnA3",
          "commit": {
            "abbreviatedOid": "6421128"
          },
          "author": "kenmccracken-google",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-25T20:47:12Z",
          "updatedAt": "2024-11-25T20:47:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Moved my name to Contributors list at the bottom.",
              "createdAt": "2024-11-25T20:47:12Z",
              "updatedAt": "2024-11-25T20:47:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOLJmm786CvPf-",
      "title": "Acknowledgments and remove Daniel from author list",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/78",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #77 \r\n\r\ncc: @dfeldman \r\n\r\nNote: the relevant changes are in the first commit. Everything else is build process tweaks and fixes from @martinthomson.",
      "createdAt": "2024-11-21T23:00:54Z",
      "updatedAt": "2025-01-17T20:40:21Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "ba2577a228ab66ef2bb4dd7ffba24e511bb5295c",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-acks",
      "headRefOid": "184e16a93ae3c0c6594f0b961b04517b60b59cc4",
      "closedAt": "2024-12-01T08:14:58Z",
      "mergedAt": "2024-12-01T08:14:58Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "18fe59fa46980891e2fd8f025f85f5c743fece7f"
      },
      "comments": [
        {
          "author": "jricher",
          "authorAssociation": "COLLABORATOR",
          "body": "Please restore or re-generate the README.md file.",
          "createdAt": "2024-11-25T20:54:59Z",
          "updatedAt": "2024-11-25T20:54:59Z"
        },
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "> Please restore or re-generate the README.md file.\r\n\r\nGood catch, thanks @jricher. I've no idea why Martin's tools are doing that.",
          "createdAt": "2024-11-26T15:36:54Z",
          "updatedAt": "2024-11-26T15:36:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786TTMDP",
          "commit": {
            "abbreviatedOid": "184e16a"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-01T00:11:32Z",
          "updatedAt": "2024-12-01T00:11:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOLJmm786CxkSR",
      "title": "Some basic maintenance",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/79",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are probably a few more things to add, but this should help some.",
      "createdAt": "2024-11-22T07:56:01Z",
      "updatedAt": "2024-11-22T10:55:08Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "a35882e6545c2f34c1dc93acdd26521d58b82774",
      "headRepository": "martinthomson/wimse-s2s-protocol",
      "headRefName": "package-json",
      "headRefOid": "db2c43f4e987f2815aafeeef3dd468b2ec9778df",
      "closedAt": "2024-11-22T10:55:08Z",
      "mergedAt": "2024-11-22T10:55:07Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "ba2577a228ab66ef2bb4dd7ffba24e511bb5295c"
      },
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Martin!",
          "createdAt": "2024-11-22T08:31:00Z",
          "updatedAt": "2024-11-22T08:31:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786SP7cp",
          "commit": {
            "abbreviatedOid": "db2c43f"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-22T08:30:34Z",
          "updatedAt": "2024-11-22T08:30:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOLJmm786C0emH",
      "title": "Add numbering to high-level sequence",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/80",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #36.",
      "createdAt": "2024-11-22T14:05:28Z",
      "updatedAt": "2025-01-17T20:40:17Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "ba2577a228ab66ef2bb4dd7ffba24e511bb5295c",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-figure",
      "headRefOid": "b0e09e4736f1780e4e90366c37c20a797ce606a0",
      "closedAt": "2024-12-24T15:23:33Z",
      "mergedAt": "2024-12-24T15:23:33Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "cdfe7bd2c08c3ed1fe994db6f73206cebad37b8a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786TTMGb",
          "commit": {
            "abbreviatedOid": "1ec9099"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-01T00:13:26Z",
          "updatedAt": "2024-12-01T00:13:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJmm786T8CjK",
          "commit": {
            "abbreviatedOid": "1ec9099"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-05T15:09:35Z",
          "updatedAt": "2024-12-05T15:09:35Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Should we make the arrow on 2) go in both direction to accumulate mTLS?",
              "createdAt": "2024-12-05T15:09:35Z",
              "updatedAt": "2024-12-05T15:09:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786T8fB0",
          "commit": {
            "abbreviatedOid": "1ec9099"
          },
          "author": "arndt-s",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-05T15:46:11Z",
          "updatedAt": "2024-12-05T15:46:11Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "After discussion, maybe add authn to step 2 and leave step 3 with authz only?",
              "createdAt": "2024-12-05T15:46:11Z",
              "updatedAt": "2024-12-05T15:46:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786UI1kT",
          "commit": {
            "abbreviatedOid": "1ec9099"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-06T16:28:27Z",
          "updatedAt": "2024-12-06T16:28:27Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Please see the new version. I'm afraid the diagram's diff is a bit messy.",
              "createdAt": "2024-12-06T16:28:27Z",
              "updatedAt": "2024-12-06T16:28:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786V6mST",
          "commit": {
            "abbreviatedOid": "b0e09e4"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-19T15:13:08Z",
          "updatedAt": "2024-12-19T15:13:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOLJmm786Djiw5",
      "title": "Use rfcfold for section 4.2 and add make target",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/81",
      "state": "MERGED",
      "author": "arndt-s",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See title",
      "createdAt": "2024-11-29T10:47:07Z",
      "updatedAt": "2025-01-17T20:41:00Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "ba2577a228ab66ef2bb4dd7ffba24e511bb5295c",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "arndt/rfcfold_make",
      "headRefOid": "292a3f60734b6146f437105fa938529c2cc58ec6",
      "closedAt": "2024-11-29T13:00:56Z",
      "mergedAt": "2024-11-29T13:00:56Z",
      "mergedBy": "arndt-s",
      "mergeCommit": {
        "oid": "66ffd3d6ce4d5aabc0e6a63670ed265526d318d0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786TNKh-",
          "commit": {
            "abbreviatedOid": "292a3f6"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Works for me. Thanks!",
          "createdAt": "2024-11-29T11:23:30Z",
          "updatedAt": "2024-11-29T11:23:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOLJmm786FSdzp",
      "title": "resolve issue 49",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/82",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolve issue #49 ",
      "createdAt": "2024-12-16T01:56:28Z",
      "updatedAt": "2024-12-23T03:11:42Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "18fe59fa46980891e2fd8f025f85f5c743fece7f",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "issue-49",
      "headRefOid": "ac229b0cef2e7221a71de93727158fc9a4a8f6f4",
      "closedAt": "2024-12-23T03:11:41Z",
      "mergedAt": "2024-12-23T03:11:41Z",
      "mergedBy": "jsalowey",
      "mergeCommit": {
        "oid": "165f19011c43b3c2d48fcd060ade1b4299413e4e"
      },
      "comments": [
        {
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "body": "added line breaks to lines added in this PR",
          "createdAt": "2024-12-19T15:58:20Z",
          "updatedAt": "2024-12-19T15:58:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786VbH0r",
          "commit": {
            "abbreviatedOid": "4b57547"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-12-16T18:01:59Z",
          "updatedAt": "2024-12-16T18:06:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIf the WIMSE client uses a hostname to connect to the server and the server certificate contain a DNS SAN the client MUST perform standard host name validation ({{Section 6.3 of RFC9525}}) unless it is configured with the information necessary to validate the peer's WIMSE identity. If the client did not perform standard host name validation then the WIMSE client SHOULD further use the WIMSE workload identifier to validate the server.  The host portion of the WIMSE workload identifier is NOT treated as a host name as specified in section 6.4 of {{!RFC9525}} but rather as a trust domain. The server identity is encoded in the path portion of the WIMSE workload identifier in a deployment specific way. Validating the WIMSE workload identity could be a simple match on the trust domain and path portions of the identifier or validation may be based on the specific details on how the identifier is constructed. The path portion of the WIMSE identifier MUST always be considered in the scope of the trust domain.\r\n```\r\n\r\nReplaced \"The host portion of the URI representation of the WIMSE workload identity\" by what I think is simpler and more consistent.",
              "createdAt": "2024-12-16T18:01:59Z",
              "updatedAt": "2024-12-16T18:06:22Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nThe server application retrieves the WIMSE workload identifier from the client certificate subjectAltName, which in turn is obtained from the TLS layer. The identifier is used in authorization, accounting and auditing.  For example, the full WIMSE workload identifier may be matched against ACLs to authorize actions requested by the peer and the identifier may be included in log messages to associate actions to the client workload for audit purposes. A deployment may specify other authorization policies based on the specific details of how the WIMSE identifier is constructed. The path portion of the WIMSE identifier MUST always be considered in the scope of the trust domain.\r\n```\r\n\r\nIdentity -> identifier when a concrete value is meant.",
              "createdAt": "2024-12-16T18:05:33Z",
              "updatedAt": "2024-12-16T18:06:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786V7a6e",
          "commit": {
            "abbreviatedOid": "ac229b0"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-19T16:02:43Z",
          "updatedAt": "2024-12-19T16:02:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOLJmm786F0y-I",
      "title": "Terribly complex ABNF for WPT",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/83",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #32.",
      "createdAt": "2024-12-19T17:53:01Z",
      "updatedAt": "2024-12-24T15:22:23Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "18fe59fa46980891e2fd8f025f85f5c743fece7f",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-abnf",
      "headRefOid": "ba28b19efed81a73dbb3badaea1f1d5753622760",
      "closedAt": "2024-12-24T15:22:23Z",
      "mergedAt": "2024-12-24T15:22:23Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "d4b653f78b0cc8880ddc3781b7161872c22b0d62"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786V9XhH",
          "commit": {
            "abbreviatedOid": "ba28b19"
          },
          "author": "bc-pi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-19T18:26:51Z",
          "updatedAt": "2024-12-19T18:26:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOLJmm786GClW1",
      "title": "coexistence with bearer tokens",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/84",
      "state": "MERGED",
      "author": "jsalowey",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Resolve with Issue #53 ",
      "createdAt": "2024-12-23T05:22:19Z",
      "updatedAt": "2025-01-17T13:18:54Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "165f19011c43b3c2d48fcd060ade1b4299413e4e",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "jsalowey-coexist",
      "headRefOid": "8e4983ffbe35d2aaaf564444f8070c3985381193",
      "closedAt": "2025-01-17T13:18:53Z",
      "mergedAt": "2025-01-17T13:18:53Z",
      "mergedBy": "yaronf",
      "mergeCommit": {
        "oid": "eb0056fbbe10704a5d0cb7ddb3589a8211999c78"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786WN1Gn",
          "commit": {
            "abbreviatedOid": "d9b62cd"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-12-23T09:06:23Z",
          "updatedAt": "2024-12-23T09:35:44Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nper-caller to allow the workload to reject bearer tokens from callers that support WITs. Once a deployment fully supports WITs, then the use of\r\n```",
              "createdAt": "2024-12-23T09:06:23Z",
              "updatedAt": "2024-12-23T09:35:44Z"
            },
            {
              "originalPosition": 16,
              "body": "This is OK for now, but I think eventually we will want one subsection for coexistence with legacy stuff and another for authorization.",
              "createdAt": "2024-12-23T09:19:45Z",
              "updatedAt": "2024-12-23T09:35:44Z"
            },
            {
              "originalPosition": 9,
              "body": "Suggest to add: Implementations should be careful when implementing such a transition strategy, since the decision which token to prefer is made when the caller's identity has still not been authenticated, and needs to be revalidated following the authentication step.",
              "createdAt": "2024-12-23T09:35:34Z",
              "updatedAt": "2024-12-23T09:35:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJmm786Yhzrr",
          "commit": {
            "abbreviatedOid": "8e4983f"
          },
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-17T13:18:38Z",
          "updatedAt": "2025-01-17T13:18:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 85,
      "id": "PR_kwDOLJmm786IKFWq",
      "title": "Doc history - -02",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/85",
      "state": "CLOSED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-17T13:36:57Z",
      "updatedAt": "2025-01-17T20:40:16Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "eb0056fbbe10704a5d0cb7ddb3589a8211999c78",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-abnf",
      "headRefOid": "f601383238a92323539158e3358e8477808ebf16",
      "closedAt": "2025-01-17T13:37:34Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "yaronf",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, branch mix up",
          "createdAt": "2025-01-17T13:37:34Z",
          "updatedAt": "2025-01-17T13:37:34Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 86,
      "id": "PR_kwDOLJmm786IKJ64",
      "title": "Doc history for -02",
      "url": "https://github.com/ietf-wg-wimse/draft-ietf-wimse-s2s-protocol/pull/86",
      "state": "MERGED",
      "author": "yaronf",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-01-17T13:47:22Z",
      "updatedAt": "2025-01-17T20:40:14Z",
      "baseRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "baseRefName": "main",
      "baseRefOid": "eb0056fbbe10704a5d0cb7ddb3589a8211999c78",
      "headRepository": "ietf-wg-wimse/draft-ietf-wimse-s2s-protocol",
      "headRefName": "ys-doc-hist",
      "headRefOid": "6a3d48ad84687e90b5525b484c9c01e046c94a7e",
      "closedAt": "2025-01-17T18:02:18Z",
      "mergedAt": "2025-01-17T18:02:18Z",
      "mergedBy": "jsalowey",
      "mergeCommit": {
        "oid": "ab10cbcfacb942f2fa5f090600fa009f84bfa0a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJmm786YkRVM",
          "commit": {
            "abbreviatedOid": "6a3d48a"
          },
          "author": "jsalowey",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-17T18:02:11Z",
          "updatedAt": "2025-01-17T18:02:11Z",
          "comments": []
        }
      ]
    }
  ]
}