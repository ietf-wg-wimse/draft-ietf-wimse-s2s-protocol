



Workload Identity in Multi System Environments               B. Campbell
Internet-Draft                                             Ping Identity
Intended status: Standards Track                              D. Feldman
Expires: 15 December 2024                                               
                                                              J. Salowey
                                                                  Venafi
                                                      A. Schwenkschuster
                                                               Microsoft
                                                              Y. Sheffer
                                                                  Intuit
                                                            13 June 2024


                WIMSE Service to Service Authentication
                draft-sheffer-wimse-s2s-protocol-latest

Abstract

   TODO Abstract

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://yaronf.github.io/wimse-s2s/draft-sheffer-wimse-s2s-
   protocol.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-sheffer-wimse-s2s-protocol/.

   Discussion of this document takes place on the Workload Identity in
   Multi System Environments Working Group mailing list
   (mailto:wimse@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/wimse/.  Subscribe at
   https://www.ietf.org/mailman/listinfo/wimse/.

   Source for this draft and an issue tracker can be found at
   https://github.com/yaronf/wimse-s2s.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 15 December 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
     1.1.  Deployment Architecture and Message Flow
   2.  Conventions and Definitions
   3.  Application Level Service To Service Authentication
     3.1.  The WIMSE ID Token
     3.2.  Option 1: DPoP-Inspired Authentication
     3.3.  Option 2: Authentication Based on HTTP Message Signatures
   4.  Using Mutual TLS for Service To Service Authentication
     4.1.  Host Name Validation
     4.2.  Authorization Using the WIMSE Identity
   5.  Security Considerations
   6.  IANA Considerations
   7.  References
     7.1.  Normative References
     7.2.  Informative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   This document defines authentication and authorization in the context
   of interaction between two workloads.  This is the core component of
   the WIMSE architecture [I-D.ietf-wimse-arch].  Assume that Service A
   needs to call Service B.  For simplicity, this document focuses on
   HTTP-based services, and the service-to-service call consists of a
   single HTTP request and its response.  We define the credentials that
   both services should possess and how they are used to protect the
   HTTP exchange.

   There are multiple deployment styles in use today, and they result in
   different security properties.  We propose to address them
   differently.

   *  Many use cases have various middleboxes inserted between pairs of
      services, resulting in a transport layer that is not end-to-end
      encrypted.  We propose to address these use cases by protecting
      the HTTP messages at the application level (Section 3).

   *  The other commonly deployed architecture has a mutual-TLS
      connection between each pair of services.  This setup can be
      addressed by a simpler solution (Section 4).

   It is an explicit goal of this protocol that a service deployment can
   include both architectures across a multi-chain call.  In other
   words, Service A can call Service B with mutual TLS protection, while
   the next call to Service C is protected at the application level.

   For application-level protection we currently propose two alternative
   solutions, one inspired by DPoP [RFC9449] and one which is a profile
   of HTTP Message Signatures [RFC9421].  The design team believes that
   we need to pick one of these two alternatives for standardization,
   once we have understood their pros and cons.

1.1.  Deployment Architecture and Message Flow

   Regardless of the transport between the workloads, we assume the
   following logical architecture:

   +------------+               +------------+
   |            |               |            |
   |            |               | Workload B |
   | Workload A |==============>|            |
   |            |               |   +--------+
   |            |               |   |  PEP   |
   +------------+               +---+--------+
         ^                        ^     ^
         |                        |     |
         | +----------------------+     |
         | |                            |
         v v                            v
   +------------+               +------------+
   |            |               |            |
   |  Identity  |               |    PDP     |
   |   Server   |               | (optional) |
   |            |               |            |
   +------------+               +------------+

   The Identity Server provisions credentials to each of the workloads.
   At least Workload A (and possibly both) must be provisioned with a
   credential before the call can proceed.  Details of communication
   with the Identity Server are out of scope of this document, however
   we do describe the credential received by the workload.

   PEP is a Policy Enforcement Point, the component that allows the call
   to go through or blocks it.  PDP is an optional Policy Decision
   Point, which may be deployed in architectures where policy management
   is centralized.  All details of policy management and message
   authorization are out of scope of this document.

   The high-level message flow is as follows:

   *  Workload A obtains a credential from the Identity Server.  This
      happens periodically, e.g. once every 24 hours.

   *  Workload A makes an HTTP call into Workload B.  This is a regular
      HTTP request, with the additional protection mechanisms defined
      below.

   *  Workload B now authenticates Workload A and decides whether to
      authorize the call.  In certain architectures, Workload B may need
      to consult with an external server to decide whether to accept the
      call.

   *  Workload B returns a response to Workload A, which may be an error
      response or a regular one.

2.  Conventions and Definitions

   This document uses "service" and "workload" interchangeably.
   Otherwise, all terms are as defined by [I-D.ietf-wimse-arch].

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  Application Level Service To Service Authentication

3.1.  The WIMSE ID Token

3.2.  Option 1: DPoP-Inspired Authentication

3.3.  Option 2: Authentication Based on HTTP Message Signatures

4.  Using Mutual TLS for Service To Service Authentication

   The WIMSE workload identity may be carried within an X.509
   certificate.  The WIMSE workload identity MUST be encoded in a
   SubjctAltName extension of type URI.  There MUST be only one
   SubjectAltName extension of type URI in a WIMSE certificate.  The
   WIMSE certificate may contain SubjectAltName extensions of other
   types such as DNSName.

   WIMSE identities may be used to validate server and client
   connections.  When validating a WIMSE identity the relying party MUST
   validate that the CA issuer for the WIMSE identity is authorized to
   issue certificates for the trust domain of the WIMSE identity in the
   certificate.  Other PKIX path validation rules apply.

   Servers wishing to use the WIMSE identity for authorizing the client
   MUST require client certificate authentication in the TLS handshake.
   Other methods of post handshake authentication are not specified by
   this document.

   WIMSE clients and servers MUST validate that the trust domain portion
   of the WIMSE certificate matches the expected trust domain for the
   other side of the connection.

4.1.  Host Name Validation

   [TODO: the following paragraph needs better alignment with RFC 9525.
   The following is a very drafty straw man]

   It is RECOMMENDED that the client match the WIMSE identity in the
   certificate against the WIMSE identity of the workload of the
   intended server.  In this case the host portion of the URI is NOT
   treated as a host name as specified in section 6.4 of [RFC9525] but
   rather as a trust domain.  The server identity is encoded in the path
   portion of the WIMSE identity in a deployment specific way.

   In some cases the WIMSE client may connect to the server using a DNS
   host name in which case the client MUST perform host name validation
   as defined in 6.3 in RFC 9525.

4.2.  Authorization Using the WIMSE Identity

   The client or server application may retrieve the WIMSE identity from
   the TLS layer for use in authorization, accounting and auditing.  For
   example, the full URI may be matched against ACLs and other policy
   constructs to authorize actions requested by the peer.

5.  Security Considerations

   TODO Security and Privacy

   TLS trust assumptions, server vs mutual auth, middleboxes

6.  IANA Considerations

   TODO IANA

7.  References

7.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9421]  Backman, A., Ed., Richer, J., Ed., and M. Sporny, "HTTP
              Message Signatures", RFC 9421, DOI 10.17487/RFC9421,
              February 2024, <https://www.rfc-editor.org/rfc/rfc9421>.

   [RFC9525]  Saint-Andre, P. and R. Salz, "Service Identity in TLS",
              RFC 9525, DOI 10.17487/RFC9525, November 2023,
              <https://www.rfc-editor.org/rfc/rfc9525>.

7.2.  Informative References

   [I-D.ietf-wimse-arch]
              Salowey, J. A., Rosomakho, Y., and H. Tschofenig,
              "Workload Identity in a Multi System Environment (WIMSE)
              Architecture", Work in Progress, Internet-Draft, draft-
              ietf-wimse-arch-00, 18 April 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-wimse-
              arch-00>.

   [RFC9449]  Fett, D., Campbell, B., Bradley, J., Lodderstedt, T.,
              Jones, M., and D. Waite, "OAuth 2.0 Demonstrating Proof of
              Possession (DPoP)", RFC 9449, DOI 10.17487/RFC9449,
              September 2023, <https://www.rfc-editor.org/rfc/rfc9449>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Brian Campbell
   Ping Identity
   Email: bcampbell@pingidentity.com


   Daniel Feldman


   Joe Salowey
   Venafi
   Email: joe.salowey@gmail.com


   Arndt Schwenkschuster
   Microsoft
   Email: arndts.ietf@gmail.com


   Yaron Sheffer
   Intuit
   Email: yaronf.ietf@gmail.com
